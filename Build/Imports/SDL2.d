/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license ( the "Software" ) to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module SDL2;

private {
    import core.stdc.config;
    import core.stdc.stdio;
    import core.stdc.stdio;
    import core.stdc.stdarg;
}

/*
This function is not part of the public interface,  but SDL expects it to be called before any subsystems have been intiailized.
Normally, this happens via linking with libSDLmain, but since that doesn't happen when using Derelict, then the loader must
load this function and call it before the load method returns. Otherwise, bad things can happen.
*/
extern( C ) nothrow void SDL_SetMainReady();

private {
    import core.stdc.config;
    import core.stdc.stdio;
}

// SDL_version.h
struct SDL_version {
    Uint8 major;
    Uint8 minor;
    Uint8 patch;
}

enum : Uint8 {
    SDL_MAJOR_VERSION = 2,
    SDL_MINOR_VERSION = 0,
    SDL_PATCHLEVEL = 4,
}

enum SDL_VERSION = SDL_version(SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_PATCHLEVEL);

@nogc nothrow {
    Uint32 SDL_VERSIONNUM( Uint8 X, Uint8 Y, Uint8 Z ) {
        return X*1000 + Y*100 + Z;
    }

    Uint32 SDL_COMPILEDVERSION() {
        return SDL_VERSIONNUM( SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_PATCHLEVEL );
    }

    bool SDL_VERSION_ATLEAST( Uint8 X, Uint8 Y, Uint8 Z ) {
        return ( SDL_COMPILEDVERSION() >= SDL_VERSIONNUM( X, Y, Z ) );
    }
}


// From SDL_stdinc.h
alias int SDL_bool;
enum {
    SDL_FALSE = 0,
    SDL_TRUE = 1
}

alias Sint8 = byte;
alias Uint8 = ubyte;
alias Sint16 = short;
alias Uint16 = ushort;
alias Sint32 = int;
alias Uint32 = uint;
alias Sint64 = long;
alias Uint64 = ulong;

@nogc nothrow Uint32 SDL_FOURCC( char A, char B, char C, char D ) {
    return ( ( A << 0 ) | ( B << 8 ) | ( C << 16 ) | ( D << 24 ) );
}

// SDL.h
enum : Uint32 {
    SDL_INIT_TIMER = 0x00000001,
    SDL_INIT_AUDIO = 0x00000010,
    SDL_INIT_VIDEO = 0x00000020,
    SDL_INIT_JOYSTICK = 0x00000200,
    SDL_INIT_HAPTIC = 0x00001000,
    SDL_INIT_GAMECONTROLLER = 0x00002000,
    SDL_INIT_EVENTS = 0x00004000,
    SDL_INIT_NOPARACHUTE = 0x00100000,
    SDL_INIT_EVERYTHING =
                SDL_INIT_TIMER | SDL_INIT_AUDIO | SDL_INIT_VIDEO |
                SDL_INIT_EVENTS | SDL_INIT_JOYSTICK | SDL_INIT_HAPTIC |
                SDL_INIT_GAMECONTROLLER
}

// SDL_assert.h
alias SDL_AssertState = Uint32;
alias SDL_assert_state = SDL_AssertState;

enum : SDL_AssertState {
    SDL_ASSERTION_RETRY = 0,
    SDL_ASSERTION_BREAK = 1,
    SDL_ASSERTION_ABORT = 2,
    SDL_ASSERTION_IGNORE = 3,
    SDL_ASSERTION_ALWAYS_IGNORE = 4
}

struct SDL_AssertData {
    int always_ignore;
    Uint32 trigger_count;
    const(char) *condition;
    const(char) *filename;
    int linenum;
    const(char) *function_;
    const(SDL_AssertData) *next;
}
alias SDL_assert_data = SDL_AssertData;

extern( C ) nothrow alias SDL_AssertionHandler = SDL_AssertState function( const(SDL_AssertData)* data, void* userdata );

// SDL_audio.h
alias SDL_AudioFormat = Uint16;

enum : SDL_AudioFormat {
    SDL_AUDIO_MASK_BITSIZE = 0xFF,
    SDL_AUDIO_MASK_DATATYPE = 1<<8,
    SDL_AUDIO_MASK_ENDIAN = 1<<12,
    SDL_AUDIO_MASK_SIGNED = 1<<15,
}

@nogc nothrow {
    int SDL_AUDIO_BITSIZE( SDL_AudioFormat x ) { return x & SDL_AUDIO_MASK_BITSIZE; }
    int SDL_AUDIO_ISFLOAT( SDL_AudioFormat x ) { return x & SDL_AUDIO_MASK_DATATYPE; }
    int SDL_AUDIO_ISBIGENDIAN( SDL_AudioFormat x ) { return x & SDL_AUDIO_MASK_ENDIAN; }
    int SDL_AUDIO_ISSIGNED( SDL_AudioFormat x ) { return x & SDL_AUDIO_MASK_SIGNED; }
    int SDL_AUDIO_ISINT( SDL_AudioFormat x ) { return !SDL_AUDIO_ISFLOAT( x ); }
    int SDL_AUDIO_ISLITTLEENDIAN( SDL_AudioFormat x ) { return !SDL_AUDIO_ISBIGENDIAN( x ); }
    int SDL_AUDIO_ISUNSIGNED( SDL_AudioFormat x ) { return !SDL_AUDIO_ISSIGNED( x ); }
}

enum : SDL_AudioFormat {
    AUDIO_U8 = 0x0008,
    AUDIO_S8 = 0x8008,
    AUDIO_U16LSB = 0x0010,
    AUDIO_S16LSB = 0x8010,
    AUDIO_U16MSB = 0x1010,
    AUDIO_S16MSB = 0x9010,
    AUDIO_U16 = AUDIO_U16LSB,
    AUDIO_S16 = AUDIO_S16LSB,
    AUDIO_S32LSB = 0x8020,
    AUDIO_S32MSB = 0x9020,
    AUDIO_S32 = AUDIO_S32LSB,
    AUDIO_F32LSB = 0x8120,
    AUDIO_F32MSB = 0x9120,
    AUDIO_F32 = AUDIO_F32LSB,
}

version( LittleEndian ) {
    alias AUDIO_U16LSB AUDIO_U16SYS;
    alias AUDIO_S16LSB AUDIO_S16SYS;
    alias AUDIO_S32LSB AUDIO_S32SYS;
    alias AUDIO_F32LSB AUDIO_F32SYS;
} else {
    alias AUDIO_U16MSB AUDIO_U16SYS;
    alias AUDIO_S16MSB AUDIO_S16SYS;
    alias AUDIO_S32MSB AUDIO_S32SYS;
    alias AUDIO_F32MSB AUDIO_F32SYS;
}

enum {
    SDL_AUDIO_ALLOW_FREQUENCY_CHANGE = 0x00000001,
    SDL_AUDIO_ALLOW_FORMAT_CHANGE = 0x00000002,
    SDL_AUDIO_ALLOW_CHANNELS_CHANGE = 0x00000004,
    SDL_AUDIO_ALLOW_ANY_CHANGE = ( SDL_AUDIO_ALLOW_FREQUENCY_CHANGE|SDL_AUDIO_ALLOW_FORMAT_CHANGE|SDL_AUDIO_ALLOW_CHANNELS_CHANGE ),
}

extern( C ) nothrow alias SDL_AudioCallback = void function( void* userdata, Uint8* stream, int len );
struct SDL_AudioSpec {
    int freq;
    SDL_AudioFormat format;
    Uint8 channels;
    Uint8 silence;
    Uint16 samples;
    Uint16 padding;
    Uint32 size;
    SDL_AudioCallback callback;
    void* userdata;
}

extern( C ) nothrow alias SDL_AudioFilter = void function( SDL_AudioCVT* cvt, SDL_AudioFormat format );
struct SDL_AudioCVT {
    int needed;
    SDL_AudioFormat src_format;
    SDL_AudioFormat dst_format;
    double rate_incr;
    Uint8* buf;
    int len;
    int len_cvt;
    int len_mult;
    double len_ratio;
    SDL_AudioFilter[10] filters;
    int filter_index;
}

alias Uint32 SDL_AudioDeviceID;

alias SDL_AudioStatus = int;
enum {
    SDL_AUDIO_STOPPED = 0,
    SDL_AUDIO_PLAYING,
    SDL_AUDIO_PAUSED,
}

enum SDL_MIX_MAXVOLUME = 128;

// SDL_blendmode.h
alias SDL_BlendMode = int;
enum {
    SDL_BLENDMODE_NONE = 0x00000000,
    SDL_BLENDMODE_BLEND = 0x00000001,
    SDL_BLENDMODE_ADD = 0x00000002,
    SDL_BLENDMODE_MOD = 0x00000004
}

// SDL_cpuinfo.h
enum  SDL_CACHELINE_SIZE = 128;

// SDL_events.h
enum {
    SDL_RELEASED = 0,
    SDL_PRESSED = 1,
}

alias SDL_EventType = int;
enum {
    SDL_FIRSTEVENT = 0,
    SDL_QUIT = 0x100,
    SDL_APP_TERMINATING,
    SDL_APP_LOWMEMORY,
    SDL_APP_WILLENTERBACKGROUND,
    SDL_APP_DIDENTERBACKGROUND,
    SDL_APP_WILLENTERFOREGROUND,
    SDL_APP_DIDENTERFOREGROUND,
    SDL_WINDOWEVENT = 0x200,
    SDL_SYSWMEVENT,
    SDL_KEYDOWN = 0x300,
    SDL_KEYUP,
    SDL_TEXTEDITING,
    SDL_TEXTINPUT,
    SDL_KEYMAPCHANGED,
    SDL_MOUSEMOTION = 0x400,
    SDL_MOUSEBUTTONDOWN,
    SDL_MOUSEBUTTONUP,
    SDL_MOUSEWHEEL,
    SDL_JOYAXISMOTION = 0x600,
    SDL_JOYBALLMOTION,
    SDL_JOYHATMOTION,
    SDL_JOYBUTTONDOWN,
    SDL_JOYBUTTONUP,
    SDL_JOYDEVICEADDED,
    SDL_JOYDEVICEREMOVED,
    SDL_CONTROLLERAXISMOTION = 0x650,
    SDL_CONTROLLERBUTTONDOWN,
    SDL_CONTROLLERBUTTONUP,
    SDL_CONTROLLERDEVICEADDED,
    SDL_CONTROLLERDEVICEREMOVED,
    SDL_CONTROLLERDEVICEREMAPPED,
    SDL_FINGERDOWN = 0x700,
    SDL_FINGERUP,
    SDL_FINGERMOTION,
    SDL_DOLLARGESTURE = 0x800,
    SDL_DOLLARRECORD,
    SDL_MULTIGESTURE,
    SDL_CLIPBOARDUPDATE = 0x900,
    SDL_DROPFILE = 0x1000,
    SDL_AUDIODEVICEADDED = 0x1100,
    SDL_AUDIODEVICEREMOVED,
    SDL_RENDER_TARGETS_RESET = 0x2000,
    SDL_RENDER_DEVICE_RESET = 0x2001,
    SDL_USEREVENT = 0x8000,
    SDL_LASTEVENT = 0xFFFF
}

struct SDL_CommonEvent {
    Uint32 type;
    Uint32 timestamp;
}

struct SDL_WindowEvent {
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Uint8 event;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint32 data1;
    Sint32 data2;
}

struct SDL_KeyboardEvent {
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Uint8 state;
    Uint8 repeat;
    Uint8 padding2;
    Uint8 padding3;
    SDL_Keysym keysym;
}

enum SDL_TEXTEDITINGEVENT_TEXT_SIZE = 32;
struct SDL_TextEditingEvent {
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    char[SDL_TEXTEDITINGEVENT_TEXT_SIZE] text;
    Sint32 start;
    Sint32 length;
}

enum SDL_TEXTINPUTEVENT_TEXT_SIZE = 32;
struct SDL_TextInputEvent {
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    char[SDL_TEXTINPUTEVENT_TEXT_SIZE] text;
}

struct SDL_MouseMotionEvent {
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Uint32 which;
    Uint32 state;
    Sint32 x;
    Sint32 y;
    Sint32 xrel;
    Sint32 yrel;
}

struct SDL_MouseButtonEvent {
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Uint32 which;
    Uint8 button;
    Uint8 state;
    Uint8 clicks;
    Uint8 padding1;
    Sint32 x;
    Sint32 y;
}

struct SDL_MouseWheelEvent {
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Uint32 which;
    Sint32 x;
    Sint32 y;
    Uint32 direction;
}

struct SDL_JoyAxisEvent {
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 axis;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint16 value;
    Uint16 padding4;
}

struct SDL_JoyBallEvent {
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 ball;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint16 xrel;
    Sint16 yrel;
}

struct SDL_JoyHatEvent {
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 hat;
    Uint8 value;
    Uint8 padding1;
    Uint8 padding2;
}

struct SDL_JoyButtonEvent {
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 button;
    Uint8 state;
    Uint8 padding1;
    Uint8 padding2;
}

struct SDL_JoyDeviceEvent {
    Uint32 type;
    Uint32 timestamp;
    Sint32 which;
}

struct SDL_ControllerAxisEvent {
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 axis;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint16 value;
    Uint16 padding4;
}

struct SDL_ControllerButtonEvent {
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 button;
    Uint8 state;
    Uint8 padding1;
    Uint8 padding2;
}

struct SDL_ControllerDeviceEvent {
    Uint32 type;
    Uint32 timestamp;
    Sint32 which;
}

struct SDL_AudioDeviceEvent {
    Uint32 type;
    Uint32 timestamp;
    Uint32 which;
    Uint8 iscapture;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
}

struct SDL_TouchFingerEvent {
    Uint32 type;
    Uint32 timestamp;
    SDL_TouchID touchId;
    SDL_FingerID fingerId;
    float x;
    float y;
    float dx;
    float dy;
    float pressure;
}

struct SDL_MultiGestureEvent {
    Uint32 type;
    Uint32 timestamp;
    SDL_TouchID touchId;
    float dTheta;
    float dDist;
    float x;
    float y;
    Uint16 numFingers;
    Uint16 padding;
}

struct SDL_DollarGestureEvent {
    Uint32 type;
    Uint32 timestamp;
    SDL_TouchID touchId;
    SDL_GestureID gestureId;
    Uint32 numFingers;
    float error;
    float x;
    float y;
}

struct SDL_DropEvent {
    Uint32 type;
    Uint32 timestamp;
    char* file;
}

struct SDL_QuitEvent {
    Uint32 type;
    Uint32 timestamp;
}

struct SDL_OSEvent {
    Uint32 type;
    Uint32 timestamp;
}

struct SDL_UserEvent {
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Sint32 code;
    void* data1;
    void* data2;
}

struct SDL_SysWMEvent {
    Uint32 type;
    Uint32 timestamp;
    SDL_SysWMmsg* msg;
}


union SDL_Event {
    Uint32 type;
    SDL_CommonEvent common;
    SDL_WindowEvent window;
    SDL_KeyboardEvent key;
    SDL_TextEditingEvent edit;
    SDL_TextInputEvent text;
    SDL_MouseMotionEvent motion;
    SDL_MouseButtonEvent button;
    SDL_MouseWheelEvent wheel;
    SDL_JoyAxisEvent jaxis;
    SDL_JoyBallEvent jball;
    SDL_JoyHatEvent jhat;
    SDL_JoyButtonEvent jbutton;
    SDL_JoyDeviceEvent jdevice;
    SDL_ControllerAxisEvent caxis;
    SDL_ControllerButtonEvent cbutton;
    SDL_ControllerDeviceEvent cdevice;
    SDL_AudioDeviceEvent adevice;
    SDL_QuitEvent quit;
    SDL_UserEvent user;
    SDL_SysWMEvent syswm;
    SDL_TouchFingerEvent tfinger;
    SDL_MultiGestureEvent mgesture;
    SDL_DollarGestureEvent dgesture;
    SDL_DropEvent drop;

    Uint8[56] padding;
}

alias SDL_eventaction = int;
enum {
    SDL_ADDEVENT,
    SDL_PEEKEVENT,
    SDL_GETEVENT
}

extern( C ) nothrow alias SDL_EventFilter = int function( void* userdata, SDL_Event* event );

enum {
    SDL_QUERY = -1,
    SDL_IGNORE = 0,
    SDL_DISABLE = 0,
    SDL_ENABLE = 1,
}

// SDL_gamecontroller.h
struct SDL_GameController;
alias int SDL_GameControllerBindType;
enum {
    SDL_CONTROLLER_BINDTYPE_NONE = 0,
    SDL_CONTROLLER_BINDTYPE_BUTTON,
    SDL_CONTROLLER_BINDTYPE_AXIS,
    SDL_CONTROLLER_BINDTYPE_HAT,
}

struct SDL_GameControllerButtonBind {
    SDL_GameControllerBindType bindType;
    union value {
        int button;
        int axis;
        struct hat {
            int hat;
            int hat_mask;
        }
    }
    alias button = value.button;
    alias axis = value.axis;
    alias hat = value.hat;
}

alias SDL_GameControllerAxis = int;
enum {
    SDL_CONTROLLER_AXIS_INVALID = -1,
    SDL_CONTROLLER_AXIS_LEFTX,
    SDL_CONTROLLER_AXIS_LEFTY,
    SDL_CONTROLLER_AXIS_RIGHTX,
    SDL_CONTROLLER_AXIS_RIGHTY,
    SDL_CONTROLLER_AXIS_TRIGGERLEFT,
    SDL_CONTROLLER_AXIS_TRIGGERRIGHT,
    SDL_CONTROLLER_AXIS_MAX
}

alias SDL_GameControllerButton = int;
enum {
    SDL_CONTROLLER_BUTTON_INVALID = -1,
    SDL_CONTROLLER_BUTTON_A,
    SDL_CONTROLLER_BUTTON_B,
    SDL_CONTROLLER_BUTTON_X,
    SDL_CONTROLLER_BUTTON_Y,
    SDL_CONTROLLER_BUTTON_BACK,
    SDL_CONTROLLER_BUTTON_GUIDE,
    SDL_CONTROLLER_BUTTON_START,
    SDL_CONTROLLER_BUTTON_LEFTSTICK,
    SDL_CONTROLLER_BUTTON_RIGHTSTICK,
    SDL_CONTROLLER_BUTTON_LEFTSHOULDER,
    SDL_CONTROLLER_BUTTON_RIGHTSHOULDER,
    SDL_CONTROLLER_BUTTON_DPAD_UP,
    SDL_CONTROLLER_BUTTON_DPAD_DOWN,
    SDL_CONTROLLER_BUTTON_DPAD_LEFT,
    SDL_CONTROLLER_BUTTON_DPAD_RIGHT,
    SDL_CONTROLLER_BUTTON_MAX
}

// SDL_gesture.h
alias SDL_GestureID = Sint64;

// SDL_haptic.h
struct SDL_Haptic;

enum : Uint16 {
    SDL_HAPTIC_CONSTANT = 1<<0,
    SDL_HAPTIC_SINE = 1<<1,
    SDL_HAPTIC_LEFTRIGHT = 1<<2,
    SDL_HAPTIC_TRIANGLE = 1<<3,
    SDL_HAPTIC_SAWTOOTHUP = 1<<4,
    SDL_HAPTIC_SAWTOOTHDOWN = 1<<5,
    SDL_HAPTIC_RAMP = 1<<6,
    SDL_HAPTIC_SPRING = 1<<7,
    SDL_HAPTIC_DAMPER = 1<<8,
    SDL_HAPTIC_INERTIA = 1<<9,
    SDL_HAPTIC_FRICTION = 1<<10,
    SDL_HAPTIC_CUSTOM = 1<<11,
    SDL_HAPTIC_GAIN = 1<<12,
    SDL_HAPTIC_AUTOCENTER = 1<<13,
    SDL_HAPTIC_STATUS = 1<<14,
    SDL_HAPTIC_PAUSE = 1<<15,
    SDL_HAPTIC_POLAR = 0,
    SDL_HAPTIC_CARTESIAN = 1,
    SDL_HAPTIC_SPHERICAL = 2,
}

enum SDL_HAPTIC_INFINITY = 4294967295U;

struct SDL_HapticDirection {
    Uint8 type;
    Sint32[3] dir;
}

struct SDL_HapticConstant {
    Uint16 type;
    SDL_HapticDirection direction;
    Uint32 length;
    Uint16 delay;
    Uint16 button;
    Uint16 interval;
    Sint16 level;
    Uint16 attack_length;
    Uint16 attack_level;
    Uint16 fade_length;
    Uint16 fade_level;
}

struct SDL_HapticPeriodic {
    Uint16 type;
    SDL_HapticDirection direction;
    Uint32 length;
    Uint32 delay;
    Uint16 button;
    Uint16 interval;
    Uint16 period;
    Sint16 magnitude;
    Sint16 offset;
    Uint16 phase;
    Uint16 attack_length;
    Uint16 attack_level;
    Uint16 fade_length;
    Uint16 fade_level;
}

struct SDL_HapticCondition {
    Uint16 type;
    SDL_HapticDirection direciton;
    Uint32 length;
    Uint16 delay;
    Uint16 button;
    Uint16 interval;
    Uint16[3] right_sat;
    Uint16[3] left_sat;
    Sint16[3] right_coeff;
    Sint16[3] left_coeff;
    Uint16[3] deadband;
    Uint16[3] center;
}

struct SDL_HapticRamp {
    Uint16 type;
    SDL_HapticDirection direction;
    Uint32 length;
    Uint16 delay;
    Uint16 button;
    Uint16 interval;
    Sint16 start;
    Sint16 end;
    Uint16 attack_length;
    Uint16 attack_level;
    Uint16 fade_length;
    Uint16 fade_level;
}

struct SDL_HapticLeftRight {
    Uint16 type;
    Uint32 length;
    Uint16 large_magnitude;
    Uint16 small_magnitude;
}

struct SDL_HapticCustom {
    Uint16 type;
    SDL_HapticDirection direction;
    Uint32 length;
    Uint16 delay;
    Uint16 button;
    Uint16 interval;
    Uint8 channels;
    Uint16 period;
    Uint16 samples;
    Uint16* data;
    Uint16 attack_length;
    Uint16 attack_level;
    Uint16 fade_length;
    Uint16 fade_level;
}

union SDL_HapticEffect {
    Uint16 type;
    SDL_HapticConstant constant;
    SDL_HapticPeriodic periodic;
    SDL_HapticCondition condition;
    SDL_HapticRamp ramp;
    SDL_HapticLeftRight leftright;
    SDL_HapticCustom custom;
}

// SDL_hints.h
enum : string
{
    SDL_HINT_FRAMEBUFFER_ACCELERATION = "SDL_FRAMEBUFFER_ACCELERATION",
    SDL_HINT_RENDER_DRIVER = "SDL_RENDER_DRIVER",
    SDL_HINT_RENDER_OPENGL_SHADERS = "SDL_RENDER_OPENGL_SHADERS",
    SDL_HINT_RENDER_DIRECT3D_THREADSAFE = "SDL_RENDER_DIRECT3D_THREADSAFE",
    SDL_HINT_RENDER_DIRECT3D11_DEBUG = "SDL_RENDER_DIRECT3D11_DEBUG",
    SDL_HINT_RENDER_SCALE_QUALITY = "SDL_RENDER_SCALE_QUALITY",
    SDL_HINT_RENDER_VSYNC = "SDL_RENDER_VSYNC",
    SDL_HINT_VIDEO_ALLOW_SCREENSAVER = "SDL_VIDEO_ALLOW_SCREENSAVER",
    SDL_HINT_VIDEO_X11_XVIDMODE = "SDL_VIDEO_X11_XVIDMODE",
    SDL_HINT_VIDEO_X11_XINERAMA = "SDL_VIDEO_X11_XINERAMA",
    SDL_HINT_VIDEO_X11_XRANDR = "SDL_VIDEO_X11_XRANDR",
    SDL_HINT_VIDEO_X11_NET_WM_PING = "SDL_VIDEO_X11_NET_WM_PING",
    SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN = "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN",
    SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP = "SDL_WINDOWS_ENABLE_MESSAGELOOP",
    SDL_HINT_GRAB_KEYBOARD = "SDL_GRAB_KEYBOARD",
    SDL_HINT_MOUSE_RELATIVE_MODE_WARP = "SDL_MOUSE_RELATIVE_MODE_WARP",
    SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS = "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS",
    SDL_HINT_IDLE_TIMER_DISABLED = "SDL_IOS_IDLE_TIMER_DISABLED",
    SDL_HINT_ORIENTATIONS = "SDL_IOS_ORIENTATIONS",
    SDL_HINT_ACCELEROMETER_AS_JOYSTICK = "SDL_ACCELEROMETER_AS_JOYSTICK",
    SDL_HINT_XINPUT_ENABLED = "SDL_XINPUT_ENABLED",
    SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING = "SDL_XINPUT_USE_OLD_JOYSTICK_MAPPING",
    SDL_HINT_GAMECONTROLLERCONFIG = "SDL_GAMECONTROLLERCONFIG",
    SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS = "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS",
    SDL_HINT_ALLOW_TOPMOST = "SDL_ALLOW_TOPMOST",
    SDL_HINT_TIMER_RESOLUTION = "SDL_TIMER_RESOLUTION",
    SDL_HINT_THREAD_STACK_SIZE = "SDL_THREAD_STACK_SIZE",
    SDL_HINT_VIDEO_HIGHDPI_DISABLED = "SDL_VIDEO_HIGHDPI_DISABLED",
    SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK = "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK",
    SDL_HINT_VIDEO_WIN_D3DCOMPILER = "SDL_VIDEO_WIN_D3DCOMPILER",
    SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT = "SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT",
    SDL_HINT_WINRT_PRIVACY_POLICY_URL = "SDL_WINRT_PRIVACY_POLICY_URL",
    SDL_HINT_WINRT_PRIVACY_POLICY_LABEL = "SDL_WINRT_PRIVACY_POLICY_LABEL",
    SDL_HINT_WINRT_HANDLE_BACK_BUTTON = "SDL_WINRT_HANDLE_BACK_BUTTON",
    SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES = "SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES",
    SDL_HINT_MAC_BACKGROUND_APP = "SDL_MAC_BACKGROUND_APP",
    SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION = "SDL_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION",
    SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION = "SDL_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION",
    SDL_HINT_IME_INTERNAL_EDITING = "SDL_IME_INTERNAL_EDITING",
    SDL_HINT_ANDROID_SEPARATE_MOUSE_AND_TOUCH = "SDL_ANDROID_SEPARATE_MOUSE_AND_TOUCH",
    SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT = "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT",
    SDL_HINT_NO_SIGNAL_HANDLERS = "SDL_NO_SIGNAL_HANDLERS",
    SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4 = "SDL_WINDOWS_NO_CLOSE_ON_ALT_F4",
}

alias SDL_HintPriority = int;
enum {
    SDL_HINT_DEFAULT,
    SDL_HINT_NORMAL,
    SDL_HINT_OVERRIDE,
}

extern( C ) nothrow alias SDL_HintCallback = void function( void*, const( char )*, const( char )* );

// SDL_joystick.h
struct SDL_Joystick;

struct JoystickGUID {
    Uint8[16] data;
}

struct SDL_JoystickGUID {
    Uint8[16] data;
}

alias SDL_JoystickID = Sint32;

alias SDL_JoystickPowerLevel = int;
enum {
    SDL_JOYSTICK_POWER_UNKNOWN = -1,
    SDL_JOYSTICK_POWER_EMPTY,
    SDL_JOYSTICK_POWER_LOW,
    SDL_JOYSTICK_POWER_MEDIUM,
    SDL_JOYSTICK_POWER_FULL,
    SDL_JOYSTICK_POWER_WIRED,
    SDL_JOYSTICK_POWER_MAX
}

enum : Uint8 {
    SDL_HAT_CENTERED = 0x00,
    SDL_HAT_UP = 0x01,
    SDL_HAT_RIGHT = 0x02,
    SDL_HAT_DOWN = 0x04,
    SDL_HAT_LEFT = 0x08,
    SDL_HAT_RIGHTUP = ( SDL_HAT_RIGHT|SDL_HAT_UP ),
    SDL_HAT_RIGHTDOWN = ( SDL_HAT_RIGHT|SDL_HAT_DOWN ),
    SDL_HAT_LEFTUP = ( SDL_HAT_LEFT|SDL_HAT_UP ),
    SDL_HAT_LEFTDOWN = ( SDL_HAT_LEFT|SDL_HAT_DOWN ),
}

// SDL_keyboard.h
struct SDL_Keysym {
    SDL_Scancode scancode;
    SDL_Keycode sym;
    Uint16 mod;
    Uint32 unicode;
}

// SDL_messagebox.h
alias SDL_MessageBoxFlags = int;
enum {
    SDL_MESSAGEBOX_ERROR = 0x00000010,
    SDL_MESSAGEBOX_WARNING = 0x00000020,
    SDL_MESSAGEBOX_INFORMATION = 0x00000040,
}

alias SDL_MessageBoxButtonFlags = int;
enum {
    SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 0x00000001,
    SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 0x00000002,
}

struct SDL_MessageBoxButtonData {
    Uint32 flags;
    int buttonid;
    const( char )* text;
}

struct SDL_MessageBoxColor {
    Uint8 r, g, b;
}

alias SDL_MessageBoxColorType = int;
enum {
    SDL_MESSAGEBOX_COLOR_BACKGROUND,
    SDL_MESSAGEBOX_COLOR_TEXT,
    SDL_MESSAGEBOX_COLOR_BUTTON_BORDER,
    SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND,
    SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED,
    SDL_MESSAGEBOX_COLOR_MAX,
}

struct SDL_MessageBoxColorScheme {
    SDL_MessageBoxColor[SDL_MESSAGEBOX_COLOR_MAX] colors;
}

struct SDL_MessageBoxData {
    Uint32 flags;
    SDL_Window* window;
    const( char )* title;
    const( char )* message;
    int numbuttons;
    const( SDL_MessageBoxButtonData )* buttons;
    const( SDL_MessageBoxColorScheme )* colorScheme;
}

// SDL_scancode.h
alias SDL_Scancode = int;
enum {
    SDL_SCANCODE_UNKNOWN = 0,

    SDL_SCANCODE_A = 4,
    SDL_SCANCODE_B = 5,
    SDL_SCANCODE_C = 6,
    SDL_SCANCODE_D = 7,
    SDL_SCANCODE_E = 8,
    SDL_SCANCODE_F = 9,
    SDL_SCANCODE_G = 10,
    SDL_SCANCODE_H = 11,
    SDL_SCANCODE_I = 12,
    SDL_SCANCODE_J = 13,
    SDL_SCANCODE_K = 14,
    SDL_SCANCODE_L = 15,
    SDL_SCANCODE_M = 16,
    SDL_SCANCODE_N = 17,
    SDL_SCANCODE_O = 18,
    SDL_SCANCODE_P = 19,
    SDL_SCANCODE_Q = 20,
    SDL_SCANCODE_R = 21,
    SDL_SCANCODE_S = 22,
    SDL_SCANCODE_T = 23,
    SDL_SCANCODE_U = 24,
    SDL_SCANCODE_V = 25,
    SDL_SCANCODE_W = 26,
    SDL_SCANCODE_X = 27,
    SDL_SCANCODE_Y = 28,
    SDL_SCANCODE_Z = 29,

    SDL_SCANCODE_1 = 30,
    SDL_SCANCODE_2 = 31,
    SDL_SCANCODE_3 = 32,
    SDL_SCANCODE_4 = 33,
    SDL_SCANCODE_5 = 34,
    SDL_SCANCODE_6 = 35,
    SDL_SCANCODE_7 = 36,
    SDL_SCANCODE_8 = 37,
    SDL_SCANCODE_9 = 38,
    SDL_SCANCODE_0 = 39,

    SDL_SCANCODE_RETURN = 40,
    SDL_SCANCODE_ESCAPE = 41,
    SDL_SCANCODE_BACKSPACE = 42,
    SDL_SCANCODE_TAB = 43,
    SDL_SCANCODE_SPACE = 44,

    SDL_SCANCODE_MINUS = 45,
    SDL_SCANCODE_EQUALS = 46,
    SDL_SCANCODE_LEFTBRACKET = 47,
    SDL_SCANCODE_RIGHTBRACKET = 48,
    SDL_SCANCODE_BACKSLASH = 49,
    SDL_SCANCODE_NONUSHASH = 50,
    SDL_SCANCODE_SEMICOLON = 51,
    SDL_SCANCODE_APOSTROPHE = 52,
    SDL_SCANCODE_GRAVE = 53,
    SDL_SCANCODE_COMMA = 54,
    SDL_SCANCODE_PERIOD = 55,
    SDL_SCANCODE_SLASH = 56,

    SDL_SCANCODE_CAPSLOCK = 57,

    SDL_SCANCODE_F1 = 58,
    SDL_SCANCODE_F2 = 59,
    SDL_SCANCODE_F3 = 60,
    SDL_SCANCODE_F4 = 61,
    SDL_SCANCODE_F5 = 62,
    SDL_SCANCODE_F6 = 63,
    SDL_SCANCODE_F7 = 64,
    SDL_SCANCODE_F8 = 65,
    SDL_SCANCODE_F9 = 66,
    SDL_SCANCODE_F10 = 67,
    SDL_SCANCODE_F11 = 68,
    SDL_SCANCODE_F12 = 69,

    SDL_SCANCODE_PRINTSCREEN = 70,
    SDL_SCANCODE_SCROLLLOCK = 71,
    SDL_SCANCODE_PAUSE = 72,
    SDL_SCANCODE_INSERT = 73,
    SDL_SCANCODE_HOME = 74,
    SDL_SCANCODE_PAGEUP = 75,
    SDL_SCANCODE_DELETE = 76,
    SDL_SCANCODE_END = 77,
    SDL_SCANCODE_PAGEDOWN = 78,
    SDL_SCANCODE_RIGHT = 79,
    SDL_SCANCODE_LEFT = 80,
    SDL_SCANCODE_DOWN = 81,
    SDL_SCANCODE_UP = 82,

    SDL_SCANCODE_NUMLOCKCLEAR = 83,
    SDL_SCANCODE_KP_DIVIDE = 84,
    SDL_SCANCODE_KP_MULTIPLY = 85,
    SDL_SCANCODE_KP_MINUS = 86,
    SDL_SCANCODE_KP_PLUS = 87,
    SDL_SCANCODE_KP_ENTER = 88,
    SDL_SCANCODE_KP_1 = 89,
    SDL_SCANCODE_KP_2 = 90,
    SDL_SCANCODE_KP_3 = 91,
    SDL_SCANCODE_KP_4 = 92,
    SDL_SCANCODE_KP_5 = 93,
    SDL_SCANCODE_KP_6 = 94,
    SDL_SCANCODE_KP_7 = 95,
    SDL_SCANCODE_KP_8 = 96,
    SDL_SCANCODE_KP_9 = 97,
    SDL_SCANCODE_KP_0 = 98,
    SDL_SCANCODE_KP_PERIOD = 99,

    SDL_SCANCODE_NONUSBACKSLASH = 100,
    SDL_SCANCODE_APPLICATION = 101,
    SDL_SCANCODE_POWER = 102,
    SDL_SCANCODE_KP_EQUALS = 103,
    SDL_SCANCODE_F13 = 104,
    SDL_SCANCODE_F14 = 105,
    SDL_SCANCODE_F15 = 106,
    SDL_SCANCODE_F16 = 107,
    SDL_SCANCODE_F17 = 108,
    SDL_SCANCODE_F18 = 109,
    SDL_SCANCODE_F19 = 110,
    SDL_SCANCODE_F20 = 111,
    SDL_SCANCODE_F21 = 112,
    SDL_SCANCODE_F22 = 113,
    SDL_SCANCODE_F23 = 114,
    SDL_SCANCODE_F24 = 115,
    SDL_SCANCODE_EXECUTE = 116,
    SDL_SCANCODE_HELP = 117,
    SDL_SCANCODE_MENU = 118,
    SDL_SCANCODE_SELECT = 119,
    SDL_SCANCODE_STOP = 120,
    SDL_SCANCODE_AGAIN = 121,
    SDL_SCANCODE_UNDO = 122,
    SDL_SCANCODE_CUT = 123,
    SDL_SCANCODE_COPY = 124,
    SDL_SCANCODE_PASTE = 125,
    SDL_SCANCODE_FIND = 126,
    SDL_SCANCODE_MUTE = 127,
    SDL_SCANCODE_VOLUMEUP = 128,
    SDL_SCANCODE_VOLUMEDOWN = 129,
    SDL_SCANCODE_KP_COMMA = 133,
    SDL_SCANCODE_KP_EQUALSAS400 = 134,

    SDL_SCANCODE_INTERNATIONAL1 = 135,
    SDL_SCANCODE_INTERNATIONAL2 = 136,
    SDL_SCANCODE_INTERNATIONAL3 = 137,
    SDL_SCANCODE_INTERNATIONAL4 = 138,
    SDL_SCANCODE_INTERNATIONAL5 = 139,
    SDL_SCANCODE_INTERNATIONAL6 = 140,
    SDL_SCANCODE_INTERNATIONAL7 = 141,
    SDL_SCANCODE_INTERNATIONAL8 = 142,
    SDL_SCANCODE_INTERNATIONAL9 = 143,
    SDL_SCANCODE_LANG1 = 144,
    SDL_SCANCODE_LANG2 = 145,
    SDL_SCANCODE_LANG3 = 146,
    SDL_SCANCODE_LANG4 = 147,
    SDL_SCANCODE_LANG5 = 148,
    SDL_SCANCODE_LANG6 = 149,
    SDL_SCANCODE_LANG7 = 150,
    SDL_SCANCODE_LANG8 = 151,
    SDL_SCANCODE_LANG9 = 152,

    SDL_SCANCODE_ALTERASE = 153,
    SDL_SCANCODE_SYSREQ = 154,
    SDL_SCANCODE_CANCEL = 155,
    SDL_SCANCODE_CLEAR = 156,
    SDL_SCANCODE_PRIOR = 157,
    SDL_SCANCODE_RETURN2 = 158,
    SDL_SCANCODE_SEPARATOR = 159,
    SDL_SCANCODE_OUT = 160,
    SDL_SCANCODE_OPER = 161,
    SDL_SCANCODE_CLEARAGAIN = 162,
    SDL_SCANCODE_CRSEL = 163,
    SDL_SCANCODE_EXSEL = 164,

    SDL_SCANCODE_KP_00 = 176,
    SDL_SCANCODE_KP_000 = 177,
    SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
    SDL_SCANCODE_DECIMALSEPARATOR = 179,
    SDL_SCANCODE_CURRENCYUNIT = 180,
    SDL_SCANCODE_CURRENCYSUBUNIT = 181,
    SDL_SCANCODE_KP_LEFTPAREN = 182,
    SDL_SCANCODE_KP_RIGHTPAREN = 183,
    SDL_SCANCODE_KP_LEFTBRACE = 184,
    SDL_SCANCODE_KP_RIGHTBRACE = 185,
    SDL_SCANCODE_KP_TAB = 186,
    SDL_SCANCODE_KP_BACKSPACE = 187,
    SDL_SCANCODE_KP_A = 188,
    SDL_SCANCODE_KP_B = 189,
    SDL_SCANCODE_KP_C = 190,
    SDL_SCANCODE_KP_D = 191,
    SDL_SCANCODE_KP_E = 192,
    SDL_SCANCODE_KP_F = 193,
    SDL_SCANCODE_KP_XOR = 194,
    SDL_SCANCODE_KP_POWER = 195,
    SDL_SCANCODE_KP_PERCENT = 196,
    SDL_SCANCODE_KP_LESS = 197,
    SDL_SCANCODE_KP_GREATER = 198,
    SDL_SCANCODE_KP_AMPERSAND = 199,
    SDL_SCANCODE_KP_DBLAMPERSAND = 200,
    SDL_SCANCODE_KP_VERTICALBAR = 201,
    SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
    SDL_SCANCODE_KP_COLON = 203,
    SDL_SCANCODE_KP_HASH = 204,
    SDL_SCANCODE_KP_SPACE = 205,
    SDL_SCANCODE_KP_AT = 206,
    SDL_SCANCODE_KP_EXCLAM = 207,
    SDL_SCANCODE_KP_MEMSTORE = 208,
    SDL_SCANCODE_KP_MEMRECALL = 209,
    SDL_SCANCODE_KP_MEMCLEAR = 210,
    SDL_SCANCODE_KP_MEMADD = 211,
    SDL_SCANCODE_KP_MEMSUBTRACT = 212,
    SDL_SCANCODE_KP_MEMMULTIPLY = 213,
    SDL_SCANCODE_KP_MEMDIVIDE = 214,
    SDL_SCANCODE_KP_PLUSMINUS = 215,
    SDL_SCANCODE_KP_CLEAR = 216,
    SDL_SCANCODE_KP_CLEARENTRY = 217,
    SDL_SCANCODE_KP_BINARY = 218,
    SDL_SCANCODE_KP_OCTAL = 219,
    SDL_SCANCODE_KP_DECIMAL = 220,
    SDL_SCANCODE_KP_HEXADECIMAL = 221,

    SDL_SCANCODE_LCTRL = 224,
    SDL_SCANCODE_LSHIFT = 225,
    SDL_SCANCODE_LALT = 226,
    SDL_SCANCODE_LGUI = 227,
    SDL_SCANCODE_RCTRL = 228,
    SDL_SCANCODE_RSHIFT = 229,
    SDL_SCANCODE_RALT = 230,
    SDL_SCANCODE_RGUI = 231,

    SDL_SCANCODE_MODE = 257,

    SDL_SCANCODE_AUDIONEXT = 258,
    SDL_SCANCODE_AUDIOPREV = 259,
    SDL_SCANCODE_AUDIOSTOP = 260,
    SDL_SCANCODE_AUDIOPLAY = 261,
    SDL_SCANCODE_AUDIOMUTE = 262,
    SDL_SCANCODE_MEDIASELECT = 263,
    SDL_SCANCODE_WWW = 264,
    SDL_SCANCODE_MAIL = 265,
    SDL_SCANCODE_CALCULATOR = 266,
    SDL_SCANCODE_COMPUTER = 267,
    SDL_SCANCODE_AC_SEARCH = 268,
    SDL_SCANCODE_AC_HOME = 269,
    SDL_SCANCODE_AC_BACK = 270,
    SDL_SCANCODE_AC_FORWARD = 271,
    SDL_SCANCODE_AC_STOP = 272,
    SDL_SCANCODE_AC_REFRESH = 273,
    SDL_SCANCODE_AC_BOOKMARKS = 274,

    SDL_SCANCODE_BRIGHTNESSDOWN = 275,
    SDL_SCANCODE_BRIGHTNESSUP = 276,
    SDL_SCANCODE_DISPLAYSWITCH = 277,
    SDL_SCANCODE_KBDILLUMTOGGLE = 278,
    SDL_SCANCODE_KBDILLUMDOWN = 279,
    SDL_SCANCODE_KBDILLUMUP = 280,
    SDL_SCANCODE_EJECT = 281,
    SDL_SCANCODE_SLEEP = 282,

    SDL_SCANCODE_APP1 = 283,
    SDL_SCANCODE_APP2 = 284,

    SDL_NUM_SCANCODES = 512
}

// SDL_keycode.h
alias SDL_Keycode = Sint32;

enum SDLK_SCANCODE_MASK = 1<<30;
@nogc nothrow int SDL_SCANCODE_TO_KEYCODE( int X ) {
    return ( X | SDLK_SCANCODE_MASK );
}

enum {
    SDLK_UNKNOWN = 0,
    SDLK_RETURN = '\r',
    SDLK_ESCAPE = '\033',
    SDLK_BACKSPACE = '\b',
    SDLK_TAB = '\t',
    SDLK_SPACE = ' ',
    SDLK_EXCLAIM = '!',
    SDLK_QUOTEDBL = '"',
    SDLK_HASH = '#',
    SDLK_PERCENT = '%',
    SDLK_DOLLAR = '$',
    SDLK_AMPERSAND = '&',
    SDLK_QUOTE = '\'',
    SDLK_LEFTPAREN = '(',
    SDLK_RIGHTPAREN = ')',
    SDLK_ASTERISK = '*',
    SDLK_PLUS = '+',
    SDLK_COMMA = ',',
    SDLK_MINUS = '-',
    SDLK_PERIOD = '.',
    SDLK_SLASH = '/',
    SDLK_0 = '0',
    SDLK_1 = '1',
    SDLK_2 = '2',
    SDLK_3 = '3',
    SDLK_4 = '4',
    SDLK_5 = '5',
    SDLK_6 = '6',
    SDLK_7 = '7',
    SDLK_8 = '8',
    SDLK_9 = '9',
    SDLK_COLON = ':',
    SDLK_SEMICOLON = ';',
    SDLK_LESS = '<',
    SDLK_EQUALS = '=',
    SDLK_GREATER = '>',
    SDLK_QUESTION = '?',
    SDLK_AT = '@',

    SDLK_LEFTBRACKET = '[',
    SDLK_BACKSLASH = '\\',
    SDLK_RIGHTBRACKET = ']',
    SDLK_CARET = '^',
    SDLK_UNDERSCORE = '_',
    SDLK_BACKQUOTE = '`',
    SDLK_a = 'a',
    SDLK_b = 'b',
    SDLK_c = 'c',
    SDLK_d = 'd',
    SDLK_e = 'e',
    SDLK_f = 'f',
    SDLK_g = 'g',
    SDLK_h = 'h',
    SDLK_i = 'i',
    SDLK_j = 'j',
    SDLK_k = 'k',
    SDLK_l = 'l',
    SDLK_m = 'm',
    SDLK_n = 'n',
    SDLK_o = 'o',
    SDLK_p = 'p',
    SDLK_q = 'q',
    SDLK_r = 'r',
    SDLK_s = 's',
    SDLK_t = 't',
    SDLK_u = 'u',
    SDLK_v = 'v',
    SDLK_w = 'w',
    SDLK_x = 'x',
    SDLK_y = 'y',
    SDLK_z = 'z',

    SDLK_CAPSLOCK = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_CAPSLOCK ),

    SDLK_F1 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F1 ),
    SDLK_F2 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F2 ),
    SDLK_F3 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F3 ),
    SDLK_F4 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F4 ),
    SDLK_F5 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F5 ),
    SDLK_F6 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F6 ),
    SDLK_F7 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F7 ),
    SDLK_F8 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F8 ),
    SDLK_F9 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F9 ),
    SDLK_F10 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F10 ),
    SDLK_F11 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F11 ),
    SDLK_F12 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F12 ),

    SDLK_PRINTSCREEN = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_PRINTSCREEN ),
    SDLK_SCROLLLOCK = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_SCROLLLOCK ),
    SDLK_PAUSE = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_PAUSE ),
    SDLK_INSERT = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_INSERT ),
    SDLK_HOME = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_HOME ),
    SDLK_PAGEUP = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_PAGEUP ),
    SDLK_DELETE = '\177',
    SDLK_END = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_END ),
    SDLK_PAGEDOWN = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_PAGEDOWN ),
    SDLK_RIGHT = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_RIGHT ),
    SDLK_LEFT = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_LEFT ),
    SDLK_DOWN = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_DOWN ),
    SDLK_UP = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_UP ),

    SDLK_NUMLOCKCLEAR = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_NUMLOCKCLEAR ),
    SDLK_KP_DIVIDE = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_DIVIDE ),
    SDLK_KP_MULTIPLY = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_MULTIPLY ),
    SDLK_KP_MINUS = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_MINUS ),
    SDLK_KP_PLUS = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_PLUS ),
    SDLK_KP_ENTER = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_ENTER ),
    SDLK_KP_1 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_1 ),
    SDLK_KP_2 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_2 ),
    SDLK_KP_3 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_3 ),
    SDLK_KP_4 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_4 ),
    SDLK_KP_5 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_5 ),
    SDLK_KP_6 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_6 ),
    SDLK_KP_7 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_7 ),
    SDLK_KP_8 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_8 ),
    SDLK_KP_9 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_9 ),
    SDLK_KP_0 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_0 ),
    SDLK_KP_PERIOD = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_PERIOD ),

    SDLK_APPLICATION = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_APPLICATION ),
    SDLK_POWER = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_POWER ),
    SDLK_KP_EQUALS = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_EQUALS ),
    SDLK_F13 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F13 ),
    SDLK_F14 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F14 ),
    SDLK_F15 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F15 ),
    SDLK_F16 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F16 ),
    SDLK_F17 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F17 ),
    SDLK_F18 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F18 ),
    SDLK_F19 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F19 ),
    SDLK_F20 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F20 ),
    SDLK_F21 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F21 ),
    SDLK_F22 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F22 ),
    SDLK_F23 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F23 ),
    SDLK_F24 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_F24 ),
    SDLK_EXECUTE = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_EXECUTE ),
    SDLK_HELP = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_HELP ),
    SDLK_MENU = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_MENU ),
    SDLK_SELECT = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_SELECT ),
    SDLK_STOP = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_STOP ),
    SDLK_AGAIN = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_AGAIN ),
    SDLK_UNDO = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_UNDO ),
    SDLK_CUT = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_CUT ),
    SDLK_COPY = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_COPY ),
    SDLK_PASTE = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_PASTE ),
    SDLK_FIND = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_FIND ),
    SDLK_MUTE = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_MUTE ),
    SDLK_VOLUMEUP = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_VOLUMEUP ),
    SDLK_VOLUMEDOWN = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_VOLUMEDOWN ),
    SDLK_KP_COMMA = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_COMMA ),
    SDLK_KP_EQUALSAS400 =
        SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_EQUALSAS400 ),

    SDLK_ALTERASE = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_ALTERASE ),
    SDLK_SYSREQ = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_SYSREQ ),
    SDLK_CANCEL = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_CANCEL ),
    SDLK_CLEAR = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_CLEAR ),
    SDLK_PRIOR = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_PRIOR ),
    SDLK_RETURN2 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_RETURN2 ),
    SDLK_SEPARATOR = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_SEPARATOR ),
    SDLK_OUT = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_OUT ),
    SDLK_OPER = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_OPER ),
    SDLK_CLEARAGAIN = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_CLEARAGAIN ),
    SDLK_CRSEL = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_CRSEL ),
    SDLK_EXSEL = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_EXSEL ),

    SDLK_KP_00 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_00 ),
    SDLK_KP_000 = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_000 ),
    SDLK_THOUSANDSSEPARATOR =
        SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_THOUSANDSSEPARATOR ),
    SDLK_DECIMALSEPARATOR =
        SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_DECIMALSEPARATOR ),
    SDLK_CURRENCYUNIT = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_CURRENCYUNIT ),
    SDLK_CURRENCYSUBUNIT =
        SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_CURRENCYSUBUNIT ),
    SDLK_KP_LEFTPAREN = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_LEFTPAREN ),
    SDLK_KP_RIGHTPAREN = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_RIGHTPAREN ),
    SDLK_KP_LEFTBRACE = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_LEFTBRACE ),
    SDLK_KP_RIGHTBRACE = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_RIGHTBRACE ),
    SDLK_KP_TAB = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_TAB ),
    SDLK_KP_BACKSPACE = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_BACKSPACE ),
    SDLK_KP_A = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_A ),
    SDLK_KP_B = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_B ),
    SDLK_KP_C = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_C ),
    SDLK_KP_D = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_D ),
    SDLK_KP_E = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_E ),
    SDLK_KP_F = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_F ),
    SDLK_KP_XOR = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_XOR ),
    SDLK_KP_POWER = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_POWER ),
    SDLK_KP_PERCENT = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_PERCENT ),
    SDLK_KP_LESS = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_LESS ),
    SDLK_KP_GREATER = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_GREATER ),
    SDLK_KP_AMPERSAND = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_AMPERSAND ),
    SDLK_KP_DBLAMPERSAND =
        SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_DBLAMPERSAND ),
    SDLK_KP_VERTICALBAR =
        SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_VERTICALBAR ),
    SDLK_KP_DBLVERTICALBAR =
        SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_DBLVERTICALBAR ),
    SDLK_KP_COLON = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_COLON ),
    SDLK_KP_HASH = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_HASH ),
    SDLK_KP_SPACE = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_SPACE ),
    SDLK_KP_AT = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_AT ),
    SDLK_KP_EXCLAM = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_EXCLAM ),
    SDLK_KP_MEMSTORE = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_MEMSTORE ),
    SDLK_KP_MEMRECALL = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_MEMRECALL ),
    SDLK_KP_MEMCLEAR = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_MEMCLEAR ),
    SDLK_KP_MEMADD = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_MEMADD ),
    SDLK_KP_MEMSUBTRACT =
        SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_MEMSUBTRACT ),
    SDLK_KP_MEMMULTIPLY =
        SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_MEMMULTIPLY ),
    SDLK_KP_MEMDIVIDE = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_MEMDIVIDE ),
    SDLK_KP_PLUSMINUS = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_PLUSMINUS ),
    SDLK_KP_CLEAR = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_CLEAR ),
    SDLK_KP_CLEARENTRY = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_CLEARENTRY ),
    SDLK_KP_BINARY = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_BINARY ),
    SDLK_KP_OCTAL = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_OCTAL ),
    SDLK_KP_DECIMAL = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_DECIMAL ),
    SDLK_KP_HEXADECIMAL =
        SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KP_HEXADECIMAL ),

    SDLK_LCTRL = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_LCTRL ),
    SDLK_LSHIFT = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_LSHIFT ),
    SDLK_LALT = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_LALT ),
    SDLK_LGUI = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_LGUI ),
    SDLK_RCTRL = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_RCTRL ),
    SDLK_RSHIFT = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_RSHIFT ),
    SDLK_RALT = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_RALT ),
    SDLK_RGUI = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_RGUI ),

    SDLK_MODE = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_MODE ),

    SDLK_AUDIONEXT = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_AUDIONEXT ),
    SDLK_AUDIOPREV = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_AUDIOPREV ),
    SDLK_AUDIOSTOP = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_AUDIOSTOP ),
    SDLK_AUDIOPLAY = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_AUDIOPLAY ),
    SDLK_AUDIOMUTE = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_AUDIOMUTE ),
    SDLK_MEDIASELECT = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_MEDIASELECT ),
    SDLK_WWW = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_WWW ),
    SDLK_MAIL = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_MAIL ),
    SDLK_CALCULATOR = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_CALCULATOR ),
    SDLK_COMPUTER = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_COMPUTER ),
    SDLK_AC_SEARCH = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_AC_SEARCH ),
    SDLK_AC_HOME = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_AC_HOME ),
    SDLK_AC_BACK = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_AC_BACK ),
    SDLK_AC_FORWARD = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_AC_FORWARD ),
    SDLK_AC_STOP = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_AC_STOP ),
    SDLK_AC_REFRESH = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_AC_REFRESH ),
    SDLK_AC_BOOKMARKS = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_AC_BOOKMARKS ),

    SDLK_BRIGHTNESSDOWN =
        SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_BRIGHTNESSDOWN ),
    SDLK_BRIGHTNESSUP = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_BRIGHTNESSUP ),
    SDLK_DISPLAYSWITCH = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_DISPLAYSWITCH ),
    SDLK_KBDILLUMTOGGLE =
        SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KBDILLUMTOGGLE ),
    SDLK_KBDILLUMDOWN = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KBDILLUMDOWN ),
    SDLK_KBDILLUMUP = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_KBDILLUMUP ),
    SDLK_EJECT = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_EJECT ),
    SDLK_SLEEP = SDL_SCANCODE_TO_KEYCODE( SDL_SCANCODE_SLEEP )
}

alias SDL_Keymod = int;
enum {
    KMOD_NONE = 0x0000,
    KMOD_LSHIFT = 0x0001,
    KMOD_RSHIFT = 0x0002,
    KMOD_LCTRL = 0x0040,
    KMOD_RCTRL = 0x0080,
    KMOD_LALT = 0x0100,
    KMOD_RALT = 0x0200,
    KMOD_LGUI = 0x0400,
    KMOD_RGUI = 0x0800,
    KMOD_NUM = 0x1000,
    KMOD_CAPS = 0x2000,
    KMOD_MODE = 0x4000,
    KMOD_RESERVED = 0x8000,

    KMOD_CTRL = ( KMOD_LCTRL|KMOD_RCTRL ),
    KMOD_SHIFT = ( KMOD_LSHIFT|KMOD_RSHIFT ),
    KMOD_ALT = ( KMOD_LALT|KMOD_RALT ),
    KMOD_GUI = ( KMOD_LGUI|KMOD_RGUI ),
}

// SDL_log.h
enum SDL_MAX_LOG_MESSAGE = 4096;

enum {
    SDL_LOG_CATEGORY_APPLICATION,
    SDL_LOG_CATEGORY_ERROR,
    SDL_LOG_CATEGORY_ASSERT,
    SDL_LOG_CATEGORY_SYSTEM,
    SDL_LOG_CATEGORY_AUDIO,
    SDL_LOG_CATEGORY_VIDEO,
    SDL_LOG_CATEGORY_RENDER,
    SDL_LOG_CATEGORY_INPUT,

    SDL_LOG_CATEGORY_RESERVED1,
    SDL_LOG_CATEGORY_RESERVED2,
    SDL_LOG_CATEGORY_RESERVED3,
    SDL_LOG_CATEGORY_RESERVED4,
    SDL_LOG_CATEGORY_RESERVED5,
    SDL_LOG_CATEGORY_RESERVED6,
    SDL_LOG_CATEGORY_RESERVED7,
    SDL_LOG_CATEGORY_RESERVED8,
    SDL_LOG_CATEGORY_RESERVED9,
    SDL_LOG_CATEGORY_RESERVED10,

    SDL_LOG_CATEGORY_CUSTOM
}

alias SDL_LogPriority = int;
enum {
    SDL_LOG_PRIORITY_VERBOSE = 1,
    SDL_LOG_PRIORITY_DEBUG,
    SDL_LOG_PRIORITY_INFO,
    SDL_LOG_PRIORITY_WARN,
    SDL_LOG_PRIORITY_ERROR,
    SDL_LOG_PRIORITY_CRITICAL,
    SDL_NUM_LOG_PRIORITIES
}

extern( C ) nothrow alias SDL_LogOutputFunction = void function( void*, int, SDL_LogPriority, const( char )* );

// SDL_mouse.h
struct SDL_Cursor;

@nogc nothrow Uint8 SDL_BUTTON( Uint8 X ) {
    return cast( Uint8 )( 1 << ( X - 1 ) );
}

alias SDL_SystemCursor = int;
enum {
    SDL_SYSTEM_CURSOR_ARROW,
    SDL_SYSTEM_CURSOR_IBEAM,
    SDL_SYSTEM_CURSOR_WAIT,
    SDL_SYSTEM_CURSOR_CROSSHAIR,
    SDL_SYSTEM_CURSOR_WAITARROW,
    SDL_SYSTEM_CURSOR_SIZENWSE,
    SDL_SYSTEM_CURSOR_SIZENESW,
    SDL_SYSTEM_CURSOR_SIZEWE,
    SDL_SYSTEM_CURSOR_SIZENS,
    SDL_SYSTEM_CURSOR_SIZEALL,
    SDL_SYSTEM_CURSOR_NO,
    SDL_SYSTEM_CURSOR_HAND,
    SDL_NUM_SYSTEM_CURSORS
}

alias SDL_MouseWheelDirection = int;
enum {
    SDL_MOUSEWHEEL_NORMAL,
    SDL_MOUSEWHEEL_FLIPPED
}

enum : Uint8 {
    SDL_BUTTON_LEFT = 1,
    SDL_BUTTON_MIDDLE = 2,
    SDL_BUTTON_RIGHT = 3,
    SDL_BUTTON_X1 = 4,
    SDL_BUTTON_X2 = 5,
    SDL_BUTTON_LMASK = SDL_BUTTON( SDL_BUTTON_LEFT ),
    SDL_BUTTON_MMASK = SDL_BUTTON( SDL_BUTTON_MIDDLE ),
    SDL_BUTTON_RMASK = SDL_BUTTON( SDL_BUTTON_RIGHT ),
    SDL_BUTTON_X1MASK = SDL_BUTTON( SDL_BUTTON_X1 ),
    SDL_BUTTON_X2MASK = SDL_BUTTON( SDL_BUTTON_X2 ),
}

// SDL_pixels.h
enum SDL_ALPHA_OPAQUE = 255;
enum SDL_ALPHA_TRANSPARENT = 0;

enum {
    SDL_PIXELTYPE_UNKNOWN,
    SDL_PIXELTYPE_INDEX1,
    SDL_PIXELTYPE_INDEX4,
    SDL_PIXELTYPE_INDEX8,
    SDL_PIXELTYPE_PACKED8,
    SDL_PIXELTYPE_PACKED16,
    SDL_PIXELTYPE_PACKED32,
    SDL_PIXELTYPE_ARRAYU8,
    SDL_PIXELTYPE_ARRAYU16,
    SDL_PIXELTYPE_ARRAYU32,
    SDL_PIXELTYPE_ARRAYF16,
    SDL_PIXELTYPE_ARRAYF32
}

enum {
    SDL_BITMAPORDER_NONE,
    SDL_BITMAPORDER_4321,
    SDL_BITMAPORDER_1234
}

enum {
    SDL_PACKEDORDER_NONE,
    SDL_PACKEDORDER_XRGB,
    SDL_PACKEDORDER_RGBX,
    SDL_PACKEDORDER_ARGB,
    SDL_PACKEDORDER_RGBA,
    SDL_PACKEDORDER_XBGR,
    SDL_PACKEDORDER_BGRX,
    SDL_PACKEDORDER_ABGR,
    SDL_PACKEDORDER_BGRA
}

enum {
    SDL_ARRAYORDER_NONE,
    SDL_ARRAYORDER_RGB,
    SDL_ARRAYORDER_RGBA,
    SDL_ARRAYORDER_ARGB,
    SDL_ARRAYORDER_BGR,
    SDL_ARRAYORDER_BGRA,
    SDL_ARRAYORDER_ABGR
}

enum {
    SDL_PACKEDLAYOUT_NONE,
    SDL_PACKEDLAYOUT_332,
    SDL_PACKEDLAYOUT_4444,
    SDL_PACKEDLAYOUT_1555,
    SDL_PACKEDLAYOUT_5551,
    SDL_PACKEDLAYOUT_565,
    SDL_PACKEDLAYOUT_8888,
    SDL_PACKEDLAYOUT_2101010,
    SDL_PACKEDLAYOUT_1010102
}

alias SDL_DEFINE_PIXELFOURCC = SDL_FOURCC ;
@nogc nothrow {
    Uint32 SDL_DEFINE_PIXELFORMAT( int type, int order, int layout, int bits, int bytes ) {
        return ( 1<<28 ) | ( type << 24 ) | ( order << 20 ) | ( layout << 16 ) | ( bits << 8 ) | ( bytes << 0 );
    }

    Uint32 SDL_PIXELFLAG( Uint32 X ) { return ( X >> 28 ) & 0x0F; }
    Uint32 SDL_PIXELTYPE( Uint32 X ) { return ( X >> 24 ) & 0x0F; }
    Uint32 SDL_PIXELORDER( Uint32 X ) { return ( X >> 20 ) & 0x0F; }
    Uint32 SDL_PIXELLAYOUT( Uint32 X ) { return ( X >> 16 ) & 0x0F; }
    Uint32 SDL_BITSPERPIXEL( Uint32 X ) { return ( X >> 8 ) & 0xFF; }
    Uint32 SDL_BYTESPERPIXEL( Uint32 X ) {
        if( SDL_ISPIXELFORMAT_FOURCC( X )) {
            if( X == SDL_PIXELFORMAT_YUY2 || X == SDL_PIXELFORMAT_UYVY || X == SDL_PIXELFORMAT_YVYU )
                return 2;
            else
                return 1;
        } else {
            return ( X >> 0 ) & 0xFF;
        }
    }

    bool SDL_ISPIXELFORMAT_INDEXED( Uint32 format ) {
        if( !SDL_ISPIXELFORMAT_FOURCC( format )) {
            auto pixelType = SDL_PIXELTYPE( format );
            return pixelType == SDL_PIXELTYPE_INDEX1 || pixelType == SDL_PIXELTYPE_INDEX4 ||
                   pixelType == SDL_PIXELTYPE_INDEX8;
        }
        return false;
    }

    bool SDL_ISPIXELFORMAT_PACKED( Uint32 format ) {
        if( !SDL_ISPIXELFORMAT_FOURCC( format )) {
            auto pixelType = SDL_PIXELTYPE( format );
            return pixelType == SDL_PIXELTYPE_PACKED8 || pixelType == SDL_PIXELTYPE_PACKED16 ||
                   pixelType == SDL_PIXELTYPE_PACKED32;
        }
        return false;
    }

    bool SDL_ISPIXELFORMAT_ARRAY( Uint32 format ) {
        if( !SDL_ISPIXELFORMAT_FOURCC( format )) {
            auto pixelType = SDL_PIXELTYPE( format );
            return pixelType == SDL_PIXELTYPE_ARRAYU8 || pixelType == SDL_PIXELTYPE_ARRAYU16 ||
                   pixelType == SDL_PIXELTYPE_ARRAYU32 || pixelType == SDL_PIXELTYPE_ARRAYF16 ||
                   pixelType == SDL_PIXELTYPE_ARRAYF32;
        }
        return false;
    }

    bool SDL_ISPIXELFORMAT_ALPHA( Uint32 format ) {
        if( !SDL_ISPIXELFORMAT_FOURCC( format )) {
            auto pixelOrder = SDL_PIXELORDER( format );
            return (( SDL_ISPIXELFORMAT_PACKED( format ) &&
                   ( pixelOrder == SDL_PACKEDORDER_ARGB || pixelOrder == SDL_PACKEDORDER_RGBA ||
                     pixelOrder == SDL_PACKEDORDER_ABGR || pixelOrder == SDL_PACKEDORDER_BGRA )) ||
                   ( SDL_ISPIXELFORMAT_ARRAY( format ) &&
                   ( pixelOrder == SDL_ARRAYORDER_ARGB || pixelOrder == SDL_ARRAYORDER_RGBA ||
                     pixelOrder == SDL_ARRAYORDER_ABGR || pixelOrder == SDL_ARRAYORDER_BGRA )));
        }
        return false;
    }

    bool SDL_ISPIXELFORMAT_FOURCC( Uint32 format ) { return format && !( format & 0x80000000 ); }
}

enum {
    SDL_PIXELFORMAT_UNKNOWN,
    SDL_PIXELFORMAT_INDEX1LSB =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_4321, 0,
                               1, 0 ),
    SDL_PIXELFORMAT_INDEX1MSB =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_1234, 0,
                               1, 0 ),
    SDL_PIXELFORMAT_INDEX4LSB =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_4321, 0,
                               4, 0 ),
    SDL_PIXELFORMAT_INDEX4MSB =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_1234, 0,
                               4, 0 ),
    SDL_PIXELFORMAT_INDEX8 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_INDEX8, 0, 0, 8, 1 ),
    SDL_PIXELFORMAT_RGB332 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED8, SDL_PACKEDORDER_XRGB,
                               SDL_PACKEDLAYOUT_332, 8, 1 ),
    SDL_PIXELFORMAT_RGB444 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB,
                               SDL_PACKEDLAYOUT_4444, 12, 2 ),
    SDL_PIXELFORMAT_RGB555 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB,
                               SDL_PACKEDLAYOUT_1555, 15, 2 ),
    SDL_PIXELFORMAT_BGR555 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR,
                               SDL_PACKEDLAYOUT_1555, 15, 2 ),
    SDL_PIXELFORMAT_ARGB4444 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB,
                               SDL_PACKEDLAYOUT_4444, 16, 2 ),
    SDL_PIXELFORMAT_RGBA4444 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA,
                               SDL_PACKEDLAYOUT_4444, 16, 2 ),
    SDL_PIXELFORMAT_ABGR4444 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR,
                               SDL_PACKEDLAYOUT_4444, 16, 2 ),
    SDL_PIXELFORMAT_BGRA4444 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA,
                               SDL_PACKEDLAYOUT_4444, 16, 2 ),
    SDL_PIXELFORMAT_ARGB1555 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB,
                               SDL_PACKEDLAYOUT_1555, 16, 2 ),
    SDL_PIXELFORMAT_RGBA5551 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA,
                               SDL_PACKEDLAYOUT_5551, 16, 2 ),
    SDL_PIXELFORMAT_ABGR1555 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR,
                               SDL_PACKEDLAYOUT_1555, 16, 2 ),
    SDL_PIXELFORMAT_BGRA5551 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA,
                               SDL_PACKEDLAYOUT_5551, 16, 2 ),
    SDL_PIXELFORMAT_RGB565 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB,
                               SDL_PACKEDLAYOUT_565, 16, 2 ),
    SDL_PIXELFORMAT_BGR565 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR,
                               SDL_PACKEDLAYOUT_565, 16, 2 ),
    SDL_PIXELFORMAT_RGB24 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_RGB, 0,
                               24, 3 ),
    SDL_PIXELFORMAT_BGR24 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_BGR, 0,
                               24, 3 ),
    SDL_PIXELFORMAT_RGB888 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XRGB,
                               SDL_PACKEDLAYOUT_8888, 24, 4 ),
    SDL_PIXELFORMAT_RGBX8888 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBX,
                               SDL_PACKEDLAYOUT_8888, 24, 4 ),
    SDL_PIXELFORMAT_BGR888 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XBGR,
                               SDL_PACKEDLAYOUT_8888, 24, 4 ),
    SDL_PIXELFORMAT_BGRX8888 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRX,
                               SDL_PACKEDLAYOUT_8888, 24, 4 ),
    SDL_PIXELFORMAT_ARGB8888 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB,
                               SDL_PACKEDLAYOUT_8888, 32, 4 ),
    SDL_PIXELFORMAT_RGBA8888 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBA,
                               SDL_PACKEDLAYOUT_8888, 32, 4 ),
    SDL_PIXELFORMAT_ABGR8888 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ABGR,
                               SDL_PACKEDLAYOUT_8888, 32, 4 ),
    SDL_PIXELFORMAT_BGRA8888 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRA,
                               SDL_PACKEDLAYOUT_8888, 32, 4 ),
    SDL_PIXELFORMAT_ARGB2101010 =
        SDL_DEFINE_PIXELFORMAT( SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB,
                               SDL_PACKEDLAYOUT_2101010, 32, 4 ),

    SDL_PIXELFORMAT_YV12 =
        SDL_DEFINE_PIXELFOURCC( 'Y', 'V', '1', '2' ),
    SDL_PIXELFORMAT_IYUV =
        SDL_DEFINE_PIXELFOURCC( 'I', 'Y', 'U', 'V' ),
    SDL_PIXELFORMAT_YUY2 =
        SDL_DEFINE_PIXELFOURCC( 'Y', 'U', 'Y', '2' ),
    SDL_PIXELFORMAT_UYVY =
        SDL_DEFINE_PIXELFOURCC( 'U', 'Y', 'V', 'Y' ),
    SDL_PIXELFORMAT_YVYU =
        SDL_DEFINE_PIXELFOURCC( 'Y', 'V', 'Y', 'U' ),
    SDL_PIXELFORMAT_NV12 =
        SDL_DEFINE_PIXELFOURCC( 'N', 'V', '1', '2' ),
    SDL_PIXELFORMAT_NV21 =
        SDL_DEFINE_PIXELFOURCC( 'N', 'V', '2', '1' )
}

static assert( SDL_PIXELFORMAT_BGRX8888 == 0x16661804 );

struct SDL_Color {
    Uint8 r;
    Uint8 g;
    Uint8 b;
    Uint8 a;
}

struct SDL_Palette {
    int ncolors;
    SDL_Color* colors;
    // NOTE: original was named 'version'
    Uint32 _version;
    int refcount;
}

struct SDL_PixelFormat {
    Uint32 format;
    SDL_Palette *palette;
    Uint8 BitsPerPixel;
    Uint8 BytesPerPixel;
    Uint8[2] padding;
    Uint32 Rmask;
    Uint32 Gmask;
    Uint32 Bmask;
    Uint32 Amask;
    Uint8 Rloss;
    Uint8 Gloss;
    Uint8 Bloss;
    Uint8 Aloss;
    Uint8 Rshift;
    Uint8 Gshift;
    Uint8 Bshift;
    Uint8 Ashift;
    int refcount;
    SDL_PixelFormat* next;
}

// SDL_power.h
alias SDL_PowerState = int;
enum {
    SDL_POWERSTATE_UNKNOWN,
    SDL_POWERSTATE_ON_BATTERY,
    SDL_POWERSTATE_NO_BATTERY,
    SDL_POWERSTATE_CHARGING,
    SDL_POWERSTATE_CHARGED
}

// SDL_rect.h
struct SDL_Point {
    int x;
    int y;
}

struct SDL_Rect {
    int x, y;
    int w, h;
}

@nogc nothrow {
    bool SDL_PointInRect(const SDL_Point *p, const SDL_Rect *r) {
        return (( p.x >= r.x ) && ( p.x < ( r.x + r.w )) &&
                ( p.y >= r.y ) && ( p.y < ( r.y + r.h )));
    }
    bool SDL_RectEmpty( const( SDL_Rect )* X ) { return !X || ( X.w <= 0 ) || ( X.h <= 0 ); }
    bool SDL_RectEquals( const( SDL_Rect )* A, const( SDL_Rect )* B ) {
        return A && B &&
            ( A.x == B.x ) && ( A.y == B.y ) &&
            ( A.w == B.w ) && ( A.h == B.h );
    }
}

// SDL_render.h
alias SDL_RendererFlags = Uint32;
enum : Uint32 {
    SDL_RENDERER_SOFTWARE = 0x00000001,
    SDL_RENDERER_ACCELERATED = 0x00000002,
    SDL_RENDERER_PRESENTVSYNC = 0x00000004,
    SDL_RENDERER_TARGETTEXTURE = 0x00000008,
}

struct SDL_RendererInfo {
    const( char )* name;
    Uint32 flags;
    Uint32 num_texture_formats;
    Uint32[16] texture_formats;
    int max_texture_width;
    int max_texture_height;
}

alias SDL_TextureAccess = int;
enum {
    SDL_TEXTUREACCESS_STATIC,
    SDL_TEXTUREACCESS_STREAMING,
    SDL_TEXTUREACCESS_TARGET,
}

alias SDL_TextureModulate = int;
enum {
    SDL_TEXTUREMODULATE_NONE = 0x00000000,
    SDL_TEXTUREMODULATE_COLOR = 0x00000001,
    SDL_TEXTUREMODULATE_ALPHA = 0x00000002
}

alias SDL_RendererFlip = int;
enum {
    SDL_FLIP_NONE = 0x00000000,
    SDL_FLIP_HORIZONTAL = 0x00000001,
    SDL_FLIP_VERTICAL = 0x00000002,
}

struct SDL_Renderer;
struct SDL_Texture;

// SDL_rwops.h
enum {
    SDL_RWOPS_UNKNOWN = 0,
    SDL_RWOPS_WINFILE = 1,
    SDL_RWOPS_STDFILE = 2,
    SDL_RWOPS_JNIFILE = 3,
    SDL_RWOPS_MEMORY = 4,
    SDL_RWOPS_MEMORY_RO = 5,
}

struct SDL_RWops {
    extern( C ) @nogc nothrow {
        Sint64 function( SDL_RWops* ) size;
        Sint64 function( SDL_RWops*, Sint64, int ) seek;
        size_t function( SDL_RWops*, void*, size_t, size_t ) read;
        size_t function( SDL_RWops*, const( void )*, size_t, size_t ) write;
        int function( SDL_RWops* ) close;
    }

    Uint32 type;

    union Hidden {
        // version( Android )
        version( Windows ) {
            struct Windowsio {
                SDL_bool append;
                void* h;
                struct Buffer {
                    void* data;
                    size_t size;
                    size_t left;
                }
                Buffer buffer;
            }
            Windowsio windowsio;
        }

        struct Stdio {
            SDL_bool autoclose;
            FILE* fp;
        }
        Stdio stdio;

        struct Mem {
            Uint8* base;
            Uint8* here;
            Uint8* stop;
        }
        Mem mem;

        struct Unknown {
            void* data1;
        }
        Unknown unknown;
    }
    Hidden hidden;
}

enum {
    RW_SEEK_SET = 0,
    RW_SEEK_CUR = 1,
    RW_SEEK_END = 2,
}

@nogc nothrow {
    Sint64 SDL_RWsize( SDL_RWops* ctx ) { return ctx.size( ctx ); }
    Sint64 SDL_RWseek( SDL_RWops* ctx, Sint64 offset, int whence ) { return ctx.seek( ctx, offset, whence ); }
    Sint64 SDL_RWtell( SDL_RWops* ctx ) { return ctx.seek( ctx, 0, RW_SEEK_CUR ); }
    size_t SDL_RWread( SDL_RWops* ctx, void* ptr, size_t size, size_t n ) { return ctx.read( ctx, ptr, size, n ); }
    size_t SDL_RWwrite( SDL_RWops* ctx, const( void )* ptr, size_t size, size_t n ) { return ctx.write( ctx, ptr, size, n ); }
    int SDL_RWclose( SDL_RWops* ctx ) { return ctx.close( ctx ); }
}

// SDL_shape.h
enum {
    SDL_NONSHAPEABLE_WINDOW = -1,
    SDL_INVALID_SHAPE_ARGUMENT = -2,
    SDL_WINDOW_LACKS_SHAPE = -3,
}

alias WindowShapeMode = int;
enum {
    ShapeModeDefault,
    ShapeModeBinarizeAlpha,
    ShapeModeReverseBinarizeAlpha,
    ShapeModeColorKey
}

@nogc nothrow bool SDL_SHAPEMODEALPHA( WindowShapeMode mode ) {
    return mode == ShapeModeDefault || mode == ShapeModeBinarizeAlpha || mode == ShapeModeReverseBinarizeAlpha;
}

union SDL_WindowShapeParams {
    Uint8 binarizationCutoff;
    SDL_Color colorKey;
}

struct SDL_WindowShapeMode {
    WindowShapeMode mode;
    SDL_WindowShapeParams parameters;
}

// SDL_surface.h
enum {
    SDL_SWSURFACE = 0,
    SDL_PREALLOC = 0x00000001,
    SDL_RLEACCEL = 0x00000002,
    SDL_DONTFREE = 0x00000004,
}

@nogc nothrow bool SDL_MUSTLOCK( const( SDL_Surface )* S ) { return ( S.flags & SDL_RLEACCEL ) != 0; }

struct SDL_BlitMap;
struct SDL_Surface {
    Uint32 flags;
    SDL_PixelFormat* format;
    int w, h;
    int pitch;
    void* pixels;
    void* userdata;
    int locked;
    void* lock_data;
    SDL_Rect clip_rect;
    SDL_BlitMap* map;
    int refcount;
}

extern( C ) nothrow alias SDL_blit = int function( SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect );

// SDL_system.h

// SDL_syswm.h
alias SDL_SYSWM_TYPE = int;
enum {
    SDL_SYSWM_UNKNOWN,
    SDL_SYSWM_WINDOWS,
    SDL_SYSWM_X11,
    SDL_SYSWM_DIRECTFB,
    SDL_SYSWM_COCOA,
    SDL_SYSWM_UIKIT,
    SDL_SYSWM_WAYLAND,
    SDL_SYSWM_MIR,
    SDL_SYSWM_WINRT,
    SDL_SYSWM_ANDROID,
}

struct SDL_SysWMmsg {
    SDL_version version_;
    SDL_SYSWM_TYPE subsystem;
    union msg_ {
        version( Windows ) { // because wintypes types are only defined when compiling for Windows
            // Win32
            import core.sys.windows.windows;
            struct win_ {
                HWND hwnd;
                UINT msg;
                WPARAM wParam;
                LPARAM lParam;
            }
            win_ win;
        }

        version( OSX ) {
            // OS X Cocoa
            struct cocoa_ {
                int dummy;
            }
            cocoa_ cocoa;
        }

        version( Posix ) {
            // X11 unsupported for now
            struct x11_ {
                c_long[24] pad; // sufficient size for any X11 event
            }
            x11_ x11;
        }

        version( linux ) {
            // DirectFB unsupported for now
            // Consequently SDL_SysWMmsg might have a different size that in SDL
            struct dfb_ {
                void* event;
            }
            dfb_ dfb;
        }

        int dummy;
    }
    msg_ msg;
}

struct SDL_SysWMinfo {
    SDL_version version_; // version is reserved in D
    SDL_SYSWM_TYPE subsystem;

    union info_ {
        version( Windows ) {
            import core.sys.windows.windows;
            struct win_ {
               HWND window;
            }
            win_ win;
        }

        version( Posix ) {
            struct x11_ {
                void* display;
                uint window;
            }
            x11_ x11;
        }

        // TODO not too sure about all the Derelict_OS tests below.
        version( linux ) {
            struct dfb_ {
                void *dfb;
                void *window;
                void *surface;
            }
            dfb_ dfb;

            struct wl_ {
                void *display;
                void *surface;
                void *shell_surface;
            }
            wl_ wl;

            struct mir_ {
                void *connection;
                void *surface;
            }
            mir_ mir;
        }

        version( OSX ) {
            struct cocoa_ {
               void* window;
            }
            cocoa_ cocoa;

            struct uikit_ {
                void *window;
            }
            uikit_ uikit;
        }
    }
    info_ info;
}

// SDL_timer.h
extern( C ) nothrow alias SDL_TimerCallback = Uint32 function( Uint32 interval, void* param );
alias SDL_TimerID = int;

@nogc nothrow bool SDL_TICKS_PASSED( Uint32 A, Uint32 B ) {
    return cast( Sint32 )( B - A ) <= 0;
}

// SDL_touch.h
alias SDL_TouchID = Sint64;
alias SDL_FingerID = Sint64;

struct SDL_Finger {
    SDL_FingerID id;
    float x;
    float y;
    float pressure;
}

enum SDL_TOUCH_MOUSEID = cast( Uint32 )-1;

// SDL_video.h
struct SDL_DisplayMode {
    Uint32 format;
    int w;
    int h;
    int refresh_rate;
    void* driverdata;
}

struct SDL_Window;

alias SDL_WindowFlags = int;
enum {
    SDL_WINDOW_FULLSCREEN = 0x00000001,
    SDL_WINDOW_OPENGL = 0x00000002,
    SDL_WINDOW_SHOWN = 0x00000004,
    SDL_WINDOW_HIDDEN = 0x00000008,
    SDL_WINDOW_BORDERLESS = 0x00000010,
    SDL_WINDOW_RESIZABLE = 0x00000020,
    SDL_WINDOW_MINIMIZED = 0x00000040,
    SDL_WINDOW_MAXIMIZED = 0x00000080,
    SDL_WINDOW_INPUT_GRABBED = 0x00000100,
    SDL_WINDOW_INPUT_FOCUS = 0x00000200,
    SDL_WINDOW_MOUSE_FOCUS = 0x00000400,
    SDL_WINDOW_FULLSCREEN_DESKTOP = SDL_WINDOW_FULLSCREEN | 0x00001000,
    SDL_WINDOW_FOREIGN = 0x00000800,
    SDL_WINDOW_ALLOW_HIGHDPI = 0x00002000,
    SDL_WINDOW_MOUSE_CAPTURE = 0x00004000,
    SDL_WINDOW_VULKAN        = 0x10000000,
}

enum SDL_WINDOWPOS_UNDEFINED_MASK = 0x1FFF0000;
@nogc nothrow Uint32 SDL_WINDOWPOS_UNDEFINED_DISPLAY( Uint32 X ) { return ( SDL_WINDOWPOS_UNDEFINED_MASK | X ); }
enum SDL_WINDOWPOS_UNDEFINED = SDL_WINDOWPOS_UNDEFINED_DISPLAY( 0 );
@nogc nothrow bool SDL_WINDOWPOS_ISUNDEFINED( Uint32 X ) { return ( X & 0xFFFF0000 ) == SDL_WINDOWPOS_UNDEFINED_MASK; }

enum SDL_WINDOWPOS_CENTERED_MASK = 0x2FFF0000;
@nogc nothrow Uint32 SDL_WINDOWPOS_CENTERED_DISPLAY( Uint32 X ) { return ( SDL_WINDOWPOS_CENTERED_MASK | X ); }
enum SDL_WINDOWPOS_CENTERED = SDL_WINDOWPOS_CENTERED_DISPLAY( 0 );
@nogc nothrow bool SDL_WINDOWPOS_ISCENTERED( Uint32 X ) { return ( X & 0xFFFF0000 ) == SDL_WINDOWPOS_CENTERED_MASK; }

alias SDL_WindowEventID = int;
enum {
    SDL_WINDOWEVENT_NONE,
    SDL_WINDOWEVENT_SHOWN,
    SDL_WINDOWEVENT_HIDDEN,
    SDL_WINDOWEVENT_EXPOSED,
    SDL_WINDOWEVENT_MOVED,
    SDL_WINDOWEVENT_RESIZED,
    SDL_WINDOWEVENT_SIZE_CHANGED,
    SDL_WINDOWEVENT_MINIMIZED,
    SDL_WINDOWEVENT_MAXIMIZED,
    SDL_WINDOWEVENT_RESTORED,
    SDL_WINDOWEVENT_ENTER,
    SDL_WINDOWEVENT_LEAVE,
    SDL_WINDOWEVENT_FOCUS_GAINED,
    SDL_WINDOWEVENT_FOCUS_LOST,
    SDL_WINDOWEVENT_CLOSE
}

alias SDL_GLContext = void*;

alias SDL_GLattr = int;
enum {
    SDL_GL_RED_SIZE,
    SDL_GL_GREEN_SIZE,
    SDL_GL_BLUE_SIZE,
    SDL_GL_ALPHA_SIZE,
    SDL_GL_BUFFER_SIZE,
    SDL_GL_DOUBLEBUFFER,
    SDL_GL_DEPTH_SIZE,
    SDL_GL_STENCIL_SIZE,
    SDL_GL_ACCUM_RED_SIZE,
    SDL_GL_ACCUM_GREEN_SIZE,
    SDL_GL_ACCUM_BLUE_SIZE,
    SDL_GL_ACCUM_ALPHA_SIZE,
    SDL_GL_STEREO,
    SDL_GL_MULTISAMPLEBUFFERS,
    SDL_GL_MULTISAMPLESAMPLES,
    SDL_GL_ACCELERATED_VISUAL,
    SDL_GL_RETAINED_BACKING,
    SDL_GL_CONTEXT_MAJOR_VERSION,
    SDL_GL_CONTEXT_MINOR_VERSION,
    SDL_GL_CONTEXT_EGL,
    SDL_GL_CONTEXT_FLAGS,
    SDL_GL_CONTEXT_PROFILE_MASK,
    SDL_GL_SHARE_WITH_CURRENT_CONTEXT,
    SDL_GL_FRAMEBUFFER_SRGB_CAPABLE,
    SDL_GL_CONTEXT_RELEASE_BEHAVIOR,
}

alias SDL_GLprofile = int;
enum {
    SDL_GL_CONTEXT_PROFILE_CORE = 0x0001,
    SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 0x0002,
    SDL_GL_CONTEXT_PROFILE_ES = 0x0004,
}

alias SDL_GLcontextFlag = int;
enum {
    SDL_GL_CONTEXT_DEBUG_FLAG = 0x0001,
    SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 0x0002,
    SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 0x0004,
    SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 0x0008,
}

alias SDL_GLcontextReleaseFlag = int;
enum {
    SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0x0000,
    SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x0001,
}

alias SDL_HitTestResult = int;
enum {
    SDL_HITTEST_NORMAL,
    SDL_HITTEST_DRAGGABLE,
    SDL_HITTEST_RESIZE_TOPLEFT,
    SDL_HITTEST_RESIZE_TOP,
    SDL_HITTEST_RESIZE_TOPRIGHT,
    SDL_HITTEST_RESIZE_RIGHT,
    SDL_HITTEST_RESIZE_BOTTOMRIGHT,
    SDL_HITTEST_RESIZE_BOTTOM,
    SDL_HITTEST_RESIZE_BOTTOMLEFT,
    SDL_HITTEST_RESIZE_LEFT,
}
extern( C ) @nogc nothrow alias SDL_HitTest = SDL_HitTestResult function( SDL_Window*, const( SDL_Point )*, void* );

extern( C ) @nogc nothrow {
    // SDL.h
    int SDL_Init( Uint32 );
    int SDL_InitSubSystem( Uint32 );
    void SDL_QuitSubSystem( Uint32 );
    Uint32 SDL_WasInit( Uint32 );
    void SDL_Quit();
    void SDL_free( void* mem );

    // SDL_assert.h
    void SDL_SetAssertionHandler(SDL_AssertionHandler, void*);
    SDL_AssertionHandler SDL_GetDefaultAssertionHandler();
    SDL_AssertionHandler SDL_GetAssertionHandler(void**);
    const(SDL_assert_data)* SDL_GetAssertionReport();
    void SDL_ResetAssertionReport();

    // SDL_audio.h
    int SDL_GetNumAudioDrivers();
    const( char )* SDL_GetAudioDriver( int );
    int SDL_AudioInit( const( char )* );
    void SDL_AudioQuit();
    const( char )* SDL_GetCurrentAudioDriver();
    int SDL_OpenAudio( SDL_AudioSpec*, SDL_AudioSpec* );
    int SDL_GetNumAudioDevices( int );
    const( char )* SDL_GetAudioDeviceName( int, int );
    SDL_AudioDeviceID SDL_OpenAudioDevice( const( char )*, int, const( SDL_AudioSpec )*,SDL_AudioSpec*,int );
    SDL_AudioStatus SDL_GetAudioStatus();
    SDL_AudioStatus SDL_GetAudioDeviceStatus( SDL_AudioDeviceID );
    void SDL_PauseAudio( int );
    void SDL_PauseAudioDevice( SDL_AudioDeviceID, int );
    SDL_AudioSpec* SDL_LoadWAV_RW( SDL_RWops*, int, SDL_AudioSpec*, Uint8**, Uint32* );
    void SDL_FreeWAV( Uint8* );
    int SDL_BuildAudioCVT( SDL_AudioCVT*, SDL_AudioFormat, Uint8, int, SDL_AudioFormat, Uint8, int );
    int SDL_ConvertAudio( SDL_AudioCVT* );
    void SDL_MixAudio( Uint8*, const( Uint8 )*, Uint32, int );
    void SDL_MixAudioFormat( Uint8*, const( Uint8 )*, SDL_AudioFormat, Uint32, int );
    int SDL_QueueAudio( SDL_AudioDeviceID, const (void )*, Uint32 );
    int SDL_GetQueuedAudioSize( SDL_AudioDeviceID );
    int SDL_ClearQueuedAudio( SDL_AudioDeviceID );
    void SDL_LockAudio();
    void SDL_LockAudioDevice( SDL_AudioDeviceID );
    void SDL_UnlockAudio();
    void SDL_UnlockAudioDevice( SDL_AudioDeviceID );
    void SDL_CloseAudio();
    void SDL_CloseAudioDevice( SDL_AudioDeviceID );
    int SDL_AudioDeviceConnected( SDL_AudioDeviceID );

    // SDL_clipboard.h
    int SDL_SetClipboardText( const( char )* );
    char* SDL_GetClipboardText();
    SDL_bool SDL_HasClipboardText();

    // SDL_cpuinfo.h
    int SDL_GetCPUCount();
    int SDL_GetCPUCacheLineSize();
    SDL_bool SDL_HasRDTSC();
    SDL_bool SDL_HasAltiVec();
    SDL_bool SDL_HasMMX();
    SDL_bool SDL_Has3DNow();
    SDL_bool SDL_HasSSE();
    SDL_bool SDL_HasSSE2();
    SDL_bool SDL_HasSSE3();
    SDL_bool SDL_HasSSE41();
    SDL_bool SDL_HasSSE42();
    SDL_bool SDL_HasAVX();
    SDL_bool SDL_HasAVX2();
    int SDL_GetSystemRAM();

    // SDL_error.h
    void SDL_SetError( const( char )*, ... );
    const( char )* SDL_GetError();
    void SDL_ClearError();

    // SDL_events.h
    void SDL_PumpEvents();
    int SDL_PeepEvents( SDL_Event*, int, SDL_eventaction, Uint32, Uint32 );
    SDL_bool SDL_HasEvent( Uint32 );
    SDL_bool SDL_HasEvents( Uint32, Uint32 );
    void SDL_FlushEvent( Uint32 );
    void SDL_FlushEvents( Uint32, Uint32 );
    int SDL_PollEvent( SDL_Event* );
    int SDL_WaitEvent( SDL_Event* );
    int SDL_WaitEventTimeout( SDL_Event*, int );
    int SDL_PushEvent( SDL_Event* );
    void SDL_SetEventFilter( SDL_EventFilter, void* );
    void SDL_GetEventFilter( SDL_EventFilter*, void** );
    void SDL_AddEventWatch( SDL_EventFilter, void* );
    void SDL_DelEventWatch( SDL_EventFilter, void* );
    void SDL_FilterEvents( SDL_EventFilter, void* );
    Uint8 SDL_EventState( Uint32, int );
    Uint32 SDL_RegisterEvents( int );

    // SDL_filesystem.h
    char* SDL_GetBasePath();
    char* SDL_GetPrefPath( const( char )* org, const( char )* app);

    // SDL_gamecontroller.h
    int SDL_GameControllerAddMappingsFromRW( SDL_RWops*, int );
    int SDL_GameControllerAddMapping( const( char )* );
    char* SDL_GameControllerMappingForGUID( SDL_JoystickGUID );
    char* SDL_GameControllerMapping( SDL_GameController* );
    SDL_bool SDL_IsGameController( int );
    const( char )* SDL_GameControllerNameForIndex( int );
    SDL_GameController* SDL_GameControllerOpen( int );
    SDL_GameController* SDL_GameControllerFromInstanceID( SDL_JoystickID );
    const( char )* SDL_GameControllerName( SDL_GameController* );
    SDL_bool SDL_GameControllerGetAttached( SDL_GameController* );
    SDL_Joystick* SDL_GameControllerGetJoystick( SDL_GameController* );
    int SDL_GameControllerEventState( int );
    void SDL_GameControllerUpdate();
    SDL_GameControllerAxis SDL_GameControllerGetAxisFromString( const( char )* );
    const( char )* SDL_GameControllerGetStringForAxis( SDL_GameControllerAxis );
    SDL_GameControllerButtonBind SDL_GameControllerGetBindForAxis( SDL_GameController*, SDL_GameControllerAxis );
    Sint16 SDL_GameControllerGetAxis( SDL_GameController*, SDL_GameControllerAxis );
    SDL_GameControllerButton SDL_GameControllerGetButtonFromString( const( char* ) );
    const( char )* SDL_GameControllerGetStringForButton( SDL_GameControllerButton );
    SDL_GameControllerButtonBind SDL_GameControllerGetBindForButton( SDL_GameController*, SDL_GameControllerButton );
    Uint8 SDL_GameControllerGetButton( SDL_GameController*, SDL_GameControllerButton );
    void SDL_GameControllerClose( SDL_GameController* );

    // SDL_gesture.h
    int SDL_RecordGesture( SDL_TouchID );
    int SDL_SaveAllDollarTemplates( SDL_RWops* );
    int SDL_SaveDollarTemplate( SDL_GestureID, SDL_RWops* );
    int SDL_LoadDollarTemplates( SDL_TouchID, SDL_RWops* );

    // SDL_haptic.h
    int SDL_NumHaptics();
    const( char )* SDL_HapticName( int );
    SDL_Haptic* SDL_HapticOpen( int );
    int SDL_HapticOpened( int );
    int SDL_HapticIndex( SDL_Haptic* );
    int SDL_MouseIsHaptic();
    SDL_Haptic* SDL_HapticOpenFromMouse();
    int SDL_JoystickIsHaptic( SDL_Joystick* );
    SDL_Haptic* SDL_HapticOpenFromJoystick( SDL_Joystick* );
    int SDL_HapticClose( SDL_Haptic* );
    int SDL_HapticNumEffects( SDL_Haptic* );
    int SDL_HapticNumEffectsPlaying( SDL_Haptic* );
    uint SDL_HapticQuery( SDL_Haptic* );
    int SDL_HapticNumAxes( SDL_Haptic* );
    int SDL_HapticEffectSupported( SDL_Haptic*, SDL_HapticEffect* );
    int SDL_HapticNewEffect( SDL_Haptic*, SDL_HapticEffect* );
    int SDL_HapticUpdateEffect( SDL_Haptic*, int, SDL_HapticEffect* );
    int SDL_HapticRunEffect( SDL_Haptic*, int, SDL_HapticEffect* );
    int SDL_HapticStopEffect( SDL_Haptic*, int );
    int SDL_HapticDestroyEffect( SDL_Haptic*, int );
    int SDL_HapticGetEffectStatus( SDL_Haptic*, int );
    int SDL_HapticSetGain( SDL_Haptic*, int );
    int SDL_HapticSetAutocenter( SDL_Haptic*, int );
    int SDL_HapticPause( SDL_Haptic* );
    int SDL_HapticUnpause( SDL_Haptic* );
    int SDL_HapticStopAll( SDL_Haptic* );
    int SDL_HapticRumbleSupported( SDL_Haptic* );
    int SDL_HapticRumbleInit( SDL_Haptic* );
    int SDL_HapticRumblePlay( SDL_Haptic*, float, Uint32 );
    int SDL_HapticRumbleStop( SDL_Haptic* );

    // SDL_hints.h
    SDL_bool SDL_SetHintWithPriority( const( char )*, const( char )*, SDL_HintPriority );
    SDL_bool SDL_SetHint( const( char )*, const( char )* );
    const( char )* SDL_GetHint( const( char )* );
    void SDL_AddHintCallback( const( char )*, SDL_HintCallback, void* );
    void SDL_DelHintCallback( const( char )*, SDL_HintCallback, void* );
    void SDL_ClearHints();

    // SDL_joystick.h
    int SDL_NumJoysticks();
    const( char )* SDL_JoystickNameForIndex( int );
    SDL_Joystick* SDL_JoystickOpen( int );
    SDL_Joystick* SDL_JoystickFromInstanceID( SDL_JoystickID );
    const( char )* SDL_JoystickName( SDL_Joystick* );
    JoystickGUID SDL_JoystickGetDeviceGUID( int );
    JoystickGUID SDL_JoystickGetGUID( SDL_Joystick* );
    char* SDL_JoystickGetGUIDString( JoystickGUID );
    JoystickGUID SDL_JoystickGetGUIDFromString( const( char )* );
    SDL_bool SDL_JoystickGetAttached( SDL_Joystick* );
    SDL_JoystickID SDL_JoystickInstanceID( SDL_Joystick* );
    int SDL_JoystickNumAxes( SDL_Joystick* );
    int SDL_JoystickNumBalls( SDL_Joystick* );
    int SDL_JoystickNumHats( SDL_Joystick* );
    int SDL_JoystickNumButtons( SDL_Joystick* );
    void SDL_JoystickUpdate();
    int SDL_JoystickEventState( int );
    Sint16 SDL_JoystickGetAxis( SDL_Joystick*, int );
    Uint8 SDL_JoystickGetHat( SDL_Joystick*, int );
    int SDL_JoystickGetBall( SDL_Joystick*, int, int*, int* );
    Uint8 SDL_JoystickGetButton( SDL_Joystick*, int );
    void SDL_JoystickClose( SDL_Joystick* );
    SDL_JoystickPowerLevel SDL_JoystickCurrentPowerLevel( SDL_Joystick* );

    // SDL_keyboard.h
    SDL_Window* SDL_GetKeyboardFocus();
    Uint8* SDL_GetKeyboardState( int* );
    SDL_Keymod SDL_GetModState();
    void SDL_SetModState( SDL_Keymod );
    SDL_Keycode SDL_GetKeyFromScancode( SDL_Scancode );
    SDL_Scancode SDL_GetScancodeFromKey( SDL_Keycode );
    const( char )* SDL_GetScancodeName( SDL_Scancode );
    SDL_Scancode SDL_GetScancodeFromName( const( char )* );
    const( char )* SDL_GetKeyName( SDL_Keycode );
    SDL_Keycode SDL_GetKeyFromName( const( char )* );
    void SDL_StartTextInput();
    SDL_bool SDL_IsTextInputActive();
    void SDL_StopTextInput();
    void SDL_SetTextInputRect( SDL_Rect* );
    SDL_bool SDL_HasScreenKeyboardSupport();
    SDL_bool SDL_IsScreenKeyboardShown( SDL_Window* );

    // SDL_loadso.h
    void* SDL_LoadObject( const( char )* );
    void* SDL_LoadFunction( void*, const( char* ) );
    void SDL_UnloadObject( void* );

    // SDL_log.h
    void SDL_LogSetAllPriority( SDL_LogPriority );
    void SDL_LogSetPriority( int, SDL_LogPriority );
    SDL_LogPriority SDL_LogGetPriority( int );
    void SDL_LogResetPriorities();
    void SDL_Log( const( char )*, ... );
    void SDL_LogVerbose( int, const( char )*, ... );
    void SDL_LogDebug( int, const( char )*, ... );
    void SDL_LogInfo( int, const( char )*, ... );
    void SDL_LogWarn( int, const( char )*, ... );
    void SDL_LogError( int, const( char )*, ... );
    void SDL_LogCritical( int, const( char )*, ... );
    void SDL_LogMessage( int, SDL_LogPriority, const( char )*, ... );
    void SDL_LogMessageV( int, SDL_LogPriority, const( char )*, va_list );
    void SDL_LogGetOutputFunction( SDL_LogOutputFunction, void** );
    void SDL_LogSetOutputFunction( SDL_LogOutputFunction, void* );

    // SDL_messagebox.h
    int SDL_ShowMessageBox( const( SDL_MessageBoxData )*, int* );
    int SDL_ShowSimpleMessageBox( Uint32, const( char )*, const( char )*, SDL_Window* );

    // SDL_mouse.h
    SDL_Window* SDL_GetMouseFocus();
    Uint32 SDL_GetMouseState( int*, int* );
    Uint32 SDL_GetGlobalMouseState( int*, int* );
    Uint32 SDL_GetRelativeMouseState( int*, int* );
    void SDL_WarpMouseInWindow( SDL_Window*, int, int );
    void SDL_WarpMouseGlobal( int, int );
    int SDL_SetRelativeMouseMode( SDL_bool );
    int SDL_CaptureMouse( SDL_bool );
    SDL_bool SDL_GetRelativeMouseMode();
    SDL_Cursor* SDL_CreateCursor( const( Uint8 )*, const( Uint8 )*, int, int, int, int );
    SDL_Cursor* SDL_CreateColorCursor( SDL_Surface*, int, int );
    SDL_Cursor* SDL_CreateSystemCursor( SDL_SystemCursor );
    void SDL_SetCursor( SDL_Cursor* );
    SDL_Cursor* SDL_GetCursor();
    SDL_Cursor* SDL_GetDefaultCursor();
    void SDL_FreeCursor( SDL_Cursor* );
    int SDL_ShowCursor( int );

    // SDL_pixels.h
    const( char )* SDL_GetPixelFormatName( Uint32 );
    SDL_bool SDL_PixelFormatEnumToMasks( Uint32, int*, Uint32*, Uint32*, Uint32*, Uint32* );
    Uint32 SDL_MasksToPixelFormatEnum( int, Uint32, Uint32, Uint32, Uint32 );
    SDL_PixelFormat* SDL_AllocFormat( Uint32 );
    void SDL_FreeFormat( SDL_PixelFormat* );
    SDL_Palette* SDL_AllocPalette( int );
    int SDL_SetPixelFormatPalette( SDL_PixelFormat*, SDL_Palette* );
    int SDL_SetPaletteColors( SDL_Palette*, const( SDL_Color )*, int, int );
    void SDL_FreePalette( SDL_Palette* );
    Uint32 SDL_MapRGB( const( SDL_PixelFormat )*, Uint8, Uint8, Uint8 );
    Uint32 SDL_MapRGBA( const( SDL_PixelFormat )*, Uint8, Uint8, Uint8, Uint8 );
    void SDL_GetRGB( Uint32, const( SDL_PixelFormat )*, Uint8*, Uint8*, Uint8* );
    void SDL_GetRGBA( Uint32, const( SDL_PixelFormat )*, Uint8*, Uint8*, Uint8*, Uint8* );
    void SDL_CalculateGammaRamp( float, Uint16* );

    // SDL_platform.h
    const( char )* SDL_GetPlatform();

    // SDL_power.h
    SDL_PowerState SDL_GetPowerInfo( int*, int* );

    // SDL_Rect.h
    SDL_bool SDL_HasIntersection( const( SDL_Rect )*, const( SDL_Rect )* );
    SDL_bool SDL_IntersectRect( const( SDL_Rect )*, const( SDL_Rect )*, SDL_Rect* );
    void SDL_UnionRect( const( SDL_Rect )*, const( SDL_Rect )*, SDL_Rect* );
    void SDL_EnclosePoints( const( SDL_Point )*, int, const( SDL_Rect )*, SDL_Rect* );
    SDL_bool SDL_IntersectRectAndLine( const( SDL_Rect )*, int*, int*, int*, int* );

    // SDL_Render.h
    int SDL_GetNumRenderDrivers();
    int SDL_GetRenderDriverInfo( int, SDL_RendererInfo* );
    int SDL_CreateWindowAndRenderer( int, int, Uint32, SDL_Window**, SDL_Renderer** );
    SDL_Renderer* SDL_CreateRenderer( SDL_Window*, int, Uint32 );
    SDL_Renderer* SDL_CreateSoftwareRenderer( SDL_Surface* );
    SDL_Renderer* SDL_GetRenderer( SDL_Window* );
    int SDL_GetRendererInfo( SDL_Renderer*, SDL_RendererInfo* );
    int SDL_GetRendererOutputSize( SDL_Renderer*, int*, int* );
    SDL_Texture* SDL_CreateTexture( SDL_Renderer*, Uint32, int, int, int );
    SDL_Texture* SDL_CreateTextureFromSurface( SDL_Renderer*, SDL_Surface* );
    int SDL_QueryTexture( SDL_Texture*, Uint32*, int*, int*, int* );
    int SDL_SetTextureColorMod( SDL_Texture*, Uint8, Uint8, Uint8 );
    int SDL_GetTextureColorMod( SDL_Texture*, Uint8*, Uint8*, Uint8* );
    int SDL_SetTextureAlphaMod( SDL_Texture*, Uint8 );
    int SDL_GetTextureAlphaMod( SDL_Texture*, Uint8* );
    int SDL_SetTextureBlendMode( SDL_Texture*, SDL_BlendMode );
    int SDL_GetTextureBlendMode( SDL_Texture*, SDL_BlendMode* );
    int SDL_UpdateTexture( SDL_Texture*, const( SDL_Rect )*, const( void )*, int );
    int SDL_UpdateYUVTexture( SDL_Texture*, const( SDL_Rect )*, const( Uint8 )*, int, const( Uint8 )*, int, const( Uint8 )*, int );
    int SDL_LockTexture( SDL_Texture*, const( SDL_Rect )*, void**, int* );
    int SDL_UnlockTexture( SDL_Texture* );
    SDL_bool SDL_RenderTargetSupported( SDL_Renderer* );
    int SDL_SetRenderTarget( SDL_Renderer*, SDL_Texture* );
    SDL_Texture* SDL_GetRenderTarget( SDL_Renderer* );
    int SDL_RenderSetClipRect( SDL_Renderer*, const( SDL_Rect )* );
    void SDL_RenderGetClipRect( SDL_Renderer* renderer, SDL_Rect* );
    int SDL_RenderSetLogicalSize( SDL_Renderer*, int, int );
    void SDL_RenderGetLogicalSize( SDL_Renderer*, int*, int* );
    int SDL_RenderSetViewport( SDL_Renderer*, const( SDL_Rect )* );
    void SDL_RenderGetViewport( SDL_Renderer*, SDL_Rect* );
    SDL_bool SDL_RenderIsClipEnabled( SDL_Renderer* );
    int SDL_RenderSetScale( SDL_Renderer*, float, float );
    int SDL_RenderGetScale( SDL_Renderer*, float*, float* );
    int SDL_SetRenderDrawColor( SDL_Renderer*, Uint8, Uint8, Uint8, Uint8 );
    int SDL_GetRenderDrawColor( SDL_Renderer*, Uint8*, Uint8*, Uint8*, Uint8* );
    int SDL_SetRenderDrawBlendMode( SDL_Renderer*, SDL_BlendMode );
    int SDL_GetRenderDrawBlendMode( SDL_Renderer*, SDL_BlendMode* );
    int SDL_RenderClear( SDL_Renderer* );
    int SDL_RenderDrawPoint( SDL_Renderer*, int, int );
    int SDL_RenderDrawPoints( SDL_Renderer*, const( SDL_Point )*, int );
    int SDL_RenderDrawLine( SDL_Renderer*, int, int, int, int );
    int SDL_RenderDrawLines( SDL_Renderer*, const( SDL_Point )*, int );
    int SDL_RenderDrawRect( SDL_Renderer*, const( SDL_Rect )* );
    int SDL_RenderDrawRects( SDL_Renderer*, const( SDL_Rect )*, int );
    int SDL_RenderFillRect( SDL_Renderer*, const( SDL_Rect )* );
    int SDL_RenderFillRects( SDL_Renderer*, const( SDL_Rect )*, int );
    int SDL_RenderCopy( SDL_Renderer*, SDL_Texture*, const( SDL_Rect )*, const( SDL_Rect* ) );
    int SDL_RenderCopyEx( SDL_Renderer*, SDL_Texture*, const( SDL_Rect )*, const( SDL_Rect )*, const( double ), const( SDL_Point )*, const( SDL_RendererFlip ) );
    int SDL_RenderReadPixels( SDL_Renderer*, const( SDL_Rect )*, Uint32, void*, int );
    void SDL_RenderPresent( SDL_Renderer* );
    void SDL_DestroyTexture( SDL_Texture* );
    void SDL_DestroyRenderer( SDL_Renderer* );
    int SDL_GL_BindTexture( SDL_Texture*, float*, float* );
    int SDL_GL_UnbindTexture( SDL_Texture* );

    // SDL_rwops.h
    SDL_RWops* SDL_RWFromFile( const( char )*, const( char )* );
    SDL_RWops* SDL_RWFromFP( FILE*, SDL_bool );
    SDL_RWops* SDL_RWFromMem( void*, int );
    SDL_RWops* SDL_RWFromConstMem( const( void )*, int );
    SDL_RWops* SDL_AllocRW();
    void SDL_FreeRW( SDL_RWops* );
    Uint8 SDL_ReadU8( SDL_RWops* );
    Uint16 SDL_ReadLE16( SDL_RWops* );
    Uint16 SDL_ReadBE16( SDL_RWops* );
    Uint32 SDL_ReadLE32( SDL_RWops* );
    Uint32 SDL_ReadBE32( SDL_RWops* );
    Uint64 SDL_ReadLE64( SDL_RWops* );
    Uint64 SDL_ReadBE64( SDL_RWops* );
    size_t SDL_WriteU8( SDL_RWops*, Uint8 );
    size_t SDL_WriteLE16( SDL_RWops*, Uint16 );
    size_t SDL_WriteBE16( SDL_RWops*, Uint16 );
    size_t SDL_WriteLE32( SDL_RWops*, Uint32 );
    size_t SDL_WriteBE32( SDL_RWops*, Uint32 );
    size_t SDL_WriteLE64( SDL_RWops*, Uint64 );
    size_t SDL_WriteBE64( SDL_RWops*, Uint64 );

    // SDL_shape.h
    SDL_Window* SDL_CreateShapedWindow( const( char )*, uint, uint, uint, uint, Uint32 );
    SDL_bool SDL_IsShapedWindow( const( SDL_Window )* );
    int SDL_SetWindowShape( SDL_Window*, SDL_Surface*, SDL_WindowShapeMode* );
    int SDL_GetShapedWindowMode( SDL_Window*, SDL_WindowShapeMode* );

    // SDL_surface.h
    SDL_Surface* SDL_CreateRGBSurface( Uint32, int, int, int, Uint32, Uint32, Uint32, Uint32 );
    SDL_Surface* SDL_CreateRGBSurfaceFrom( void*, int, int, int, int, Uint32, Uint32, Uint32, Uint32 );
    void SDL_FreeSurface( SDL_Surface* );
    int SDL_SetSurfacePalette( SDL_Surface*, SDL_Palette* );
    int SDL_LockSurface( SDL_Surface* );
    int SDL_UnlockSurface( SDL_Surface* );
    SDL_Surface* SDL_LoadBMP_RW( SDL_RWops*, int );
    int SDL_SaveBMP_RW( SDL_Surface*, SDL_RWops*, int );
    int SDL_SetSurfaceRLE( SDL_Surface*, int );
    int SDL_SetColorKey( SDL_Surface*, int, Uint32 );
    int SDL_GetColorKey( SDL_Surface*, Uint32* );
    int SDL_SetSurfaceColorMod( SDL_Surface*, Uint8, Uint8, Uint8 );
    int SDL_GetSurfaceColorMod( SDL_Surface*, Uint8*, Uint8*, Uint8* );
    int SDL_SetSurfaceAlphaMod( SDL_Surface*, Uint8 );
    int SDL_GetSurfaceAlphaMod( SDL_Surface*, Uint8* );
    int SDL_SetSurfaceBlendMode( SDL_Surface*, SDL_BlendMode );
    int SDL_GetSurfaceBlendMode( SDL_Surface*, SDL_BlendMode* );
    SDL_bool SDL_SetClipRect( SDL_Surface*, const( SDL_Rect )* );
    void SDL_GetClipRect( SDL_Surface*, SDL_Rect* );
    SDL_Surface* SDL_ConvertSurface( SDL_Surface*, const( SDL_PixelFormat )*, Uint32 );
    SDL_Surface* SDL_ConvertSurfaceFormat( SDL_Surface*, Uint32, Uint32 );
    int SDL_ConvertPixels( int, int, Uint32, const( void )*, int, Uint32, void*, int );
    int SDL_FillRect( SDL_Surface*, const( SDL_Rect )*, Uint32 );
    int SDL_FillRects( SDL_Surface*, const( SDL_Rect )*, int, Uint32 );
    int SDL_UpperBlit( SDL_Surface*, const( SDL_Rect )*, SDL_Surface*, SDL_Rect* );
    int SDL_LowerBlit( SDL_Surface*, SDL_Rect*, SDL_Surface*, SDL_Rect* );
    int SDL_SoftStretch( SDL_Surface*, const( SDL_Rect )*, SDL_Surface*, const( SDL_Rect )* );
    int SDL_UpperBlitScaled( SDL_Surface*, const( SDL_Rect )*, SDL_Surface*, SDL_Rect* );
    int SDL_LowerBlitScaled( SDL_Surface*, SDL_Rect*, SDL_Surface*, SDL_Rect* );

    alias SDL_BlitSurface = SDL_UpperBlit;
    alias SDL_BlitScaled = SDL_UpperBlitScaled;

    // SDL_syswm.h
    SDL_bool SDL_GetWindowWMInfo(SDL_Window* window, SDL_SysWMinfo * info);

    // SDL_timer.h
    Uint32 SDL_GetTicks();
    Uint64 SDL_GetPerformanceCounter();
    Uint64 SDL_GetPerformanceFrequency();
    void SDL_Delay( Uint32 );
    SDL_TimerID SDL_AddTimer( Uint32, SDL_TimerCallback, void* );
    SDL_bool SDL_RemoveTimer( SDL_TimerID );

    // SDL_touch.h
    int SDL_GetNumTouchDevices();
    SDL_TouchID SDL_GetTouchDevice( int );
    int SDL_GetNumTouchFingers( SDL_TouchID );
    SDL_Finger* SDL_GetTouchFinger( SDL_TouchID, int );

    // SDL_version.h
    void SDL_GetVersion( SDL_version* );
    const( char )* SDL_GetRevision();
    int SDL_GetRevisionNumber();

    // SDL_video.h
    int SDL_GetNumVideoDrivers();
    const( char )* SDL_GetVideoDriver( int );
    int SDL_VideoInit( const( char )* );
    void SDL_VideoQuit();
    const( char )* SDL_GetCurrentVideoDriver();
    int SDL_GetNumVideoDisplays();
    const( char )* SDL_GetDisplayName( int );
    int SDL_GetDisplayBounds( int, SDL_Rect* );
    int SDL_GetDisplayDPI( int, float*, float*, float* );
    int SDL_GetNumDisplayModes( int );
    int SDL_GetDisplayMode( int, int, SDL_DisplayMode* );
    int SDL_GetDesktopDisplayMode( int, SDL_DisplayMode* );
    int SDL_GetCurrentDisplayMode( int, SDL_DisplayMode* );
    SDL_DisplayMode* SDL_GetClosestDisplayMode( int, const( SDL_DisplayMode )*, SDL_DisplayMode* );
    int SDL_GetWindowDisplayIndex( SDL_Window* );
    int SDL_SetWindowDisplayMode( SDL_Window*, const( SDL_DisplayMode )* );
    int SDL_GetWindowDisplayMode( SDL_Window*, SDL_DisplayMode* );
    Uint32 SDL_GetWindowPixelFormat( SDL_Window* );
    SDL_Window* SDL_CreateWindow( const( char )*, int, int, int, int, Uint32 );
    SDL_Window* SDL_CreateWindowFrom( const( void )* );
    Uint32 SDL_GetWindowID( SDL_Window* );
    SDL_Window* SDL_GetWindowFromID( Uint32 );
    Uint32 SDL_GetWindowFlags( SDL_Window* );
    void SDL_SetWindowTitle( SDL_Window*, const( char )* );
    const( char )* SDL_GetWindowTitle( SDL_Window* );
    void SDL_SetWindowIcon( SDL_Window*, SDL_Surface* );
    void* SDL_SetWindowData( SDL_Window*, const( char )*, void* );
    void* SDL_GetWindowData( SDL_Window*, const( char )* );
    void SDL_SetWindowPosition( SDL_Window*, int, int );
    void SDL_GetWindowPosition( SDL_Window*, int*, int* );
    void SDL_SetWindowSize( SDL_Window*, int, int );
    void SDL_GetWindowSize( SDL_Window*, int*, int* );
    void SDL_SetWindowMinimumSize( SDL_Window*, int, int );
    void SDL_GetWindowMinimumSize( SDL_Window*, int*, int* );
    void SDL_SetWindowMaximumSize( SDL_Window*, int, int );
    void SDL_GetWindowMaximumSize( SDL_Window*, int*, int* );
    void SDL_SetWindowBordered( SDL_Window*, SDL_bool );
    void SDL_ShowWindow( SDL_Window* );
    void SDL_HideWindow( SDL_Window* );
    void SDL_RaiseWindow( SDL_Window* );
    void SDL_MaximizeWindow( SDL_Window* );
    void SDL_MinimizeWindow( SDL_Window* );
    void SDL_RestoreWindow( SDL_Window* );
    int SDL_SetWindowFullscreen( SDL_Window*, Uint32 );
    SDL_Surface* SDL_GetWindowSurface( SDL_Window* );
    int SDL_UpdateWindowSurface( SDL_Window* );
    int SDL_UpdateWindowSurfaceRects( SDL_Window*, SDL_Rect*, int );
    void SDL_SetWindowGrab( SDL_Window*, SDL_bool );
    SDL_bool SDL_GetWindowGrab( SDL_Window* );
    SDL_Window* SDL_GetGrabbedWindow();
    int SDL_SetWindowBrightness( SDL_Window*, float );
    float SDL_GetWindowBrightness( SDL_Window* );
    int SDL_SetWindowGammaRamp( SDL_Window*, const( Uint16 )*, const( Uint16 )*, const( Uint16 )*, const( Uint16 )* );
    int SDL_GetWindowGammaRamp( SDL_Window*, Uint16*, Uint16*, Uint16*, Uint16* );
    int SDL_SetWindowHitTest( SDL_Window*, SDL_HitTest, void* );
    void SDL_DestroyWindow( SDL_Window* );
    SDL_bool SDL_IsScreenSaverEnabled();
    void SDL_EnableScreenSaver();
    void SDL_DisableScreenSaver();
    int SDL_GL_LoadLibrary( const( char )* );
    void* SDL_GL_GetProcAddress( const( char )* );
    void SDL_GL_UnloadLibrary();
    SDL_bool SDL_GL_ExtensionSupported( const( char )* );
    void SDL_GL_ResetAttributes();
    int SDL_GL_SetAttribute( SDL_GLattr, int );
    int SDL_GL_GetAttribute( SDL_GLattr, int* );
    SDL_GLContext SDL_GL_CreateContext( SDL_Window* );
    int SDL_GL_MakeCurrent( SDL_Window*, SDL_GLContext );
    SDL_Window* SDL_GL_GetCurrentWindow();
    SDL_GLContext SDL_GL_GetCurrentContext();
    void SDL_GL_GetDrawableSize( SDL_Window*, int*, int* );
    int SDL_GL_SetSwapInterval( int );
    int SDL_GL_GetSwapInterval();
    void SDL_GL_SwapWindow( SDL_Window* );
    void SDL_GL_DeleteContext( SDL_GLContext );

    import Vulkan : VkInstance, VkSurfaceKHR;

    // SDL_vulkan.h
    int SDL_Vulkan_LoadLibrary(const(char)* path);
    void* SDL_Vulkan_GetVkGetInstanceProcAddr();
    void SDL_Vulkan_UnloadLibrary();

    SDL_bool SDL_Vulkan_GetInstanceExtensions(SDL_Window*, uint* count, const(char)** names);
    SDL_bool SDL_Vulkan_CreateSurface(SDL_Window*, VkInstance, VkSurfaceKHR*);
    void SDL_Vulkan_GetDrawableSize(SDL_Window*, int* width, int* height);
}

@nogc nothrow {
    // SDL_audio.h
    SDL_AudioSpec* SDL_LoadWAV( const( char )* file, SDL_AudioSpec* spec, Uint8** audio_buf, Uint32* len ) {
        return SDL_LoadWAV_RW( SDL_RWFromFile( file, "rb" ), 1, spec, audio_buf, len );
    }

    // SDL_events.h
    Uint8 SDL_GetEventState( Uint32 type ) {
        return SDL_EventState( type, SDL_QUERY );
    }

    // SDL_GameController.h
    int SDL_GameControllerAddMappingsFromFile( const( char )* file ) {
        return SDL_GameControllerAddMappingsFromRW( SDL_RWFromFile( file, "rb" ), 1 );
    }

    // SDL_quit.h
    bool SDL_QuitRequested() {
        SDL_PumpEvents();
        return SDL_PeepEvents( null, 0, SDL_PEEKEVENT, SDL_QUIT, SDL_QUIT ) > 0;
    }

    // SDL_surface.h
    SDL_Surface* SDL_LoadBMP( const( char )* file ) {
        return SDL_LoadBMP_RW( SDL_RWFromFile( file, "rb" ), 1 );
    }

    int SDL_SaveBMP( SDL_Surface* surface, const( char )* file ) {
        return SDL_SaveBMP_RW( surface, SDL_RWFromFile( file, "wb" ), 1 );
    }
}
